[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Team",
    "section": "",
    "text": "Use this website to summarize contributions to your Data-Wrangling group project. Publish this website on Github Pages so that instructors and TAs can easily see your contributions.\nSee https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#how-to-include-pythonnotebooks-files-in-your-qmd-pages on how to include python files, notebook, notebook cells and outputs inside a quart website.\n\nTeam members\nDescribe here each group member (netid and name).\n\nbra43, Burlyn Andall-Blake\nmm3646, Mehak Malik\nsp2484, Shubham Patil",
    "crumbs": [
      "Team"
    ]
  },
  {
    "objectID": "csv/DW_SAMPLE1.html",
    "href": "csv/DW_SAMPLE1.html",
    "title": "Shubham Patil",
    "section": "",
    "text": "# import the libraries\nimport pandas as pd\nimport numpy as np\n\n\ndf_orders = pd.read_csv('orders_and_shipments.csv',encoding='ISO-8859-1')\ndf_inventory = pd.read_csv('inventory.csv')\ndf_fulfillment = pd.read_csv('fulfillment.csv')\n\n\ndf_orders.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 30871 entries, 0 to 30870\nData columns (total 24 columns):\n #   Column                       Non-Null Count  Dtype \n---  ------                       --------------  ----- \n 0    Order ID                    30871 non-null  int64 \n 1    Order Item ID               30871 non-null  int64 \n 2    Order YearMonth             30871 non-null  int64 \n 3    Order Year                  30871 non-null  int64 \n 4    Order Month                 30871 non-null  int64 \n 5    Order Day                   30871 non-null  int64 \n 6   Order Time                   30871 non-null  object\n 7   Order Quantity               30871 non-null  int64 \n 8   Product Department           30871 non-null  object\n 9   Product Category             30871 non-null  object\n 10  Product Name                 30871 non-null  object\n 11   Customer ID                 30871 non-null  int64 \n 12  Customer Market              30871 non-null  object\n 13  Customer Region              30871 non-null  object\n 14  Customer Country             30871 non-null  object\n 15  Warehouse Country            30871 non-null  object\n 16  Shipment Year                30871 non-null  int64 \n 17  Shipment Month               30871 non-null  int64 \n 18  Shipment Day                 30871 non-null  int64 \n 19  Shipment Mode                30871 non-null  object\n 20   Shipment Days - Scheduled   30871 non-null  int64 \n 21   Gross Sales                 30871 non-null  int64 \n 22   Discount %                  30871 non-null  object\n 23   Profit                      30871 non-null  int64 \ndtypes: int64(14), object(10)\nmemory usage: 5.7+ MB\n\n\n\ndf_inventory.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 4200 entries, 0 to 4199\nData columns (total 4 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   Product Name             4200 non-null   object \n 1    Year Month              4200 non-null   int64  \n 2    Warehouse Inventory     4200 non-null   int64  \n 3   Inventory Cost Per Unit  4200 non-null   float64\ndtypes: float64(1), int64(2), object(1)\nmemory usage: 131.4+ KB\n\n\n\ndf_fulfillment.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 118 entries, 0 to 117\nData columns (total 2 columns):\n #   Column                                Non-Null Count  Dtype  \n---  ------                                --------------  -----  \n 0   Product Name                          118 non-null    object \n 1    Warehouse Order Fulfillment (days)   118 non-null    float64\ndtypes: float64(1), object(1)\nmemory usage: 2.0+ KB\n\n\n\n\nimport pandas as pd\nmerged_df = pd.merge(df_orders, df_inventory, on='Product Name', how='inner')\nmerged_df = pd.merge(merged_df, df_fulfillment, on='Product Name', how='inner')\n\n\nmerged_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1110063 entries, 0 to 1110062\nData columns (total 28 columns):\n #   Column                                Non-Null Count    Dtype  \n---  ------                                --------------    -----  \n 0    Order ID                             1110063 non-null  int64  \n 1    Order Item ID                        1110063 non-null  int64  \n 2    Order YearMonth                      1110063 non-null  int64  \n 3    Order Year                           1110063 non-null  int64  \n 4    Order Month                          1110063 non-null  int64  \n 5    Order Day                            1110063 non-null  int64  \n 6   Order Time                            1110063 non-null  object \n 7   Order Quantity                        1110063 non-null  int64  \n 8   Product Department                    1110063 non-null  object \n 9   Product Category                      1110063 non-null  object \n 10  Product Name                          1110063 non-null  object \n 11   Customer ID                          1110063 non-null  int64  \n 12  Customer Market                       1110063 non-null  object \n 13  Customer Region                       1110063 non-null  object \n 14  Customer Country                      1110063 non-null  object \n 15  Warehouse Country                     1110063 non-null  object \n 16  Shipment Year                         1110063 non-null  int64  \n 17  Shipment Month                        1110063 non-null  int64  \n 18  Shipment Day                          1110063 non-null  int64  \n 19  Shipment Mode                         1110063 non-null  object \n 20   Shipment Days - Scheduled            1110063 non-null  int64  \n 21   Gross Sales                          1110063 non-null  int64  \n 22   Discount %                           1110063 non-null  object \n 23   Profit                               1110063 non-null  int64  \n 24   Year Month                           1110063 non-null  int64  \n 25   Warehouse Inventory                  1110063 non-null  int64  \n 26  Inventory Cost Per Unit               1110063 non-null  float64\n 27   Warehouse Order Fulfillment (days)   1110063 non-null  float64\ndtypes: float64(2), int64(16), object(10)\nmemory usage: 237.1+ MB\n\n\n\n\ndf = merged_df\n\n\n# Check for missing values\nmissing_values = df.isnull().sum()\n\n# Display columns with missing values and the count of missing values\nmissing_values = missing_values[missing_values &gt; 0]\n\nif not missing_values.empty:\n    print(\"Columns with missing values:\")\n    for column, count in missing_values.items():\n        print(f\"{column}: {count} missing values\")\nelse:\n    print(\"There are no columns with missing value\")\n\nThere are no columns with missing value\n\n\n\nif df.duplicated().any():\n    print(f\"There are as many as {supply_data.duplicated().sum()} duplicate data.\")\nelse:\n    print(\"There are no duplicate data.\")\n\nThere are no duplicate data.\n\n\n\ndf.columns = df.columns.str.strip()\n\n\ndf['Discount %'].sample(30)\n\n359293       0.2\n923988      0.07\n52431       0.03\n809503       0.2\n29525       0.07\n544522      0.05\n952100       -  \n560187      0.18\n223689      0.17\n884028       -  \n261321      0.12\n432968      0.06\n551368       -  \n1092286     0.04\n1035744     0.13\n488794      0.15\n679029      0.03\n225751       0.2\n1005112     0.01\n505525      0.18\n819563      0.13\n299778      0.15\n839441      0.03\n521435       0.1\n958351      0.09\n526306      0.02\n514781      0.12\n960825       -  \n119934      0.12\n821055      0.01\nName: Discount %, dtype: object\n\n\n\n# Convert the '-' values to 0 in the 'Discount %' column and then change the data type from object to float\ndf['Discount %'] = df['Discount %'].replace('  -  ', 0).astype(float)\n\n\n# Make new columns: Order Datetime and Shipment Datetime\ndf['Order Datetime'] = pd.to_datetime(df['Order Year'].astype(str) + '-' + df['Order Month'].astype(str) + '-' + df['Order Day'].astype(str) + ' ' + df['Order Time'])\ndf['Shipment Datetime'] = pd.to_datetime(df['Shipment Year'].astype(str) + '-' + df['Shipment Month'].astype(str) + '-' + df['Shipment Day'].astype(str))\n\n# Displaying the result\ndf[['Order Datetime', 'Shipment Datetime']].head()\n\n\n\n\n\n\n\n\n\nOrder Datetime\nShipment Datetime\n\n\n\n\n0\n2015-02-21 14:07:00\n2015-02-27\n\n\n1\n2015-02-21 14:07:00\n2015-02-27\n\n\n2\n2015-02-21 14:07:00\n2015-02-27\n\n\n3\n2015-02-21 14:07:00\n2015-02-27\n\n\n4\n2015-02-21 14:07:00\n2015-02-27\n\n\n\n\n\n\n\n\n\ndf.drop(columns=['Order Year', 'Order Month', 'Order Day', 'Order Time',\n                        'Shipment Year', 'Shipment Month', 'Shipment Day'], inplace=True)\n\n\ndf['Customer Country'].unique()\n\narray(['Mexico', 'Brazil', 'Denmark', 'Netherlands', 'Germany', 'China',\n       'Indonesia', 'Pakistan', 'India', 'USA', 'Hungary', 'Sudan',\n       'Democratic Republic of Congo', 'Poland', 'Togo', 'Guatemala',\n       'Panama', 'Chile', 'France', 'Sweden', 'Dominican\\xa0Republic',\n       'Venezuela', 'South Korea', 'Madagascar', 'Iran', 'Cuba',\n       'Nicaragua', 'United Kingdom', 'Afghanistan', 'Singapore',\n       'Morocco', 'Spain', 'Niger', 'Turkey', 'South Africa', 'Iraq',\n       'Honduras', 'Italy', 'Australia', 'Cote d\\x92Ivoire', 'Croatia',\n       'Ecuador', 'Syria', 'Haiti', 'Bangladesh', 'Argentina', 'Romania',\n       'Nigeria', 'Vietnam', 'Bolivia', 'El Salvador', 'Colombia',\n       'Belgium', 'Portugal', 'New zealand', 'Egypt', 'Gabon', 'Ireland',\n       'Ghana', 'Thailand', 'Russia', 'Malaysia', 'Austria', 'Belarus',\n       'Mali', 'Switzerland', 'Kenya', 'Saudi Arabia', 'Jordania',\n       'Ukraine', 'Norway', 'Algeria\\xa0', 'Lithuania', 'Barbados',\n       'Guyana', 'Myanmar', 'Zambia', 'Cambodia', 'Tanzania', 'Canada',\n       'Benín', 'Taiwan', 'Senegal', 'Papua New Guinea', 'Uzbekistan',\n       'Rwanda', 'Perú', 'Philippines', 'Guinea', 'Cameroon', 'Guadalupe',\n       'Bulgaria', 'Finland', 'Israel\\xa0', 'Georgia', 'Mauritania',\n       'Japan', 'Uruguay', 'Gambia', 'Kazakhstan', 'Angola', 'Mongolia',\n       'Azerbaijan', 'Yemen', 'Moldova', 'Zimbabwe', 'Sierra Leona',\n       'Martinique', 'Slovakia', 'UAE', 'Jamaica', 'Libya', 'Paraguay',\n       'Estonia', 'Albania', 'Trinidad and Tobago', 'Mozambique',\n       'Somalia', 'Sri Lanka', 'Czech Republic (Czechia)', 'Lesotho',\n       'Guinea-Bissau', 'Liban', 'Qatar', 'Republic of Congo',\n       'Kyrgyzstan', 'Costa Rica', 'Hong Kong', 'Montenegro', 'Liberia',\n       'Uganda', 'Namibia', 'Oman', 'Belize', 'Bosnia and Herzegovina',\n       'Tunisia', 'Macedonia', 'French Guiana', 'Nepal'], dtype=object)\n\n\n\ndf['Customer Country'] = df['Customer Country'].replace({\n    'Dominican\\xa0Republic': 'Dominican Republic',\n    'Cote d\\x92Ivoire': 'Cote d Ivoire', # Added a comma at the end of this line\n    'Perú': 'Peru',\n    'Algeria\\xa0': 'Algeria',\n    'Israel\\xa0':'Israel',\n    'Benín': 'Benin'\n})\ndf['Customer Country'].unique()\n\narray(['Mexico', 'Brazil', 'Denmark', 'Netherlands', 'Germany', 'China',\n       'Indonesia', 'Pakistan', 'India', 'USA', 'Hungary', 'Sudan',\n       'Democratic Republic of Congo', 'Poland', 'Togo', 'Guatemala',\n       'Panama', 'Chile', 'France', 'Sweden', 'Dominican Republic',\n       'Venezuela', 'South Korea', 'Madagascar', 'Iran', 'Cuba',\n       'Nicaragua', 'United Kingdom', 'Afghanistan', 'Singapore',\n       'Morocco', 'Spain', 'Niger', 'Turkey', 'South Africa', 'Iraq',\n       'Honduras', 'Italy', 'Australia', 'Cote d Ivoire', 'Croatia',\n       'Ecuador', 'Syria', 'Haiti', 'Bangladesh', 'Argentina', 'Romania',\n       'Nigeria', 'Vietnam', 'Bolivia', 'El Salvador', 'Colombia',\n       'Belgium', 'Portugal', 'New zealand', 'Egypt', 'Gabon', 'Ireland',\n       'Ghana', 'Thailand', 'Russia', 'Malaysia', 'Austria', 'Belarus',\n       'Mali', 'Switzerland', 'Kenya', 'Saudi Arabia', 'Jordania',\n       'Ukraine', 'Norway', 'Algeria', 'Lithuania', 'Barbados', 'Guyana',\n       'Myanmar', 'Zambia', 'Cambodia', 'Tanzania', 'Canada', 'Benin',\n       'Taiwan', 'Senegal', 'Papua New Guinea', 'Uzbekistan', 'Rwanda',\n       'Peru', 'Philippines', 'Guinea', 'Cameroon', 'Guadalupe',\n       'Bulgaria', 'Finland', 'Israel', 'Georgia', 'Mauritania', 'Japan',\n       'Uruguay', 'Gambia', 'Kazakhstan', 'Angola', 'Mongolia',\n       'Azerbaijan', 'Yemen', 'Moldova', 'Zimbabwe', 'Sierra Leona',\n       'Martinique', 'Slovakia', 'UAE', 'Jamaica', 'Libya', 'Paraguay',\n       'Estonia', 'Albania', 'Trinidad and Tobago', 'Mozambique',\n       'Somalia', 'Sri Lanka', 'Czech Republic (Czechia)', 'Lesotho',\n       'Guinea-Bissau', 'Liban', 'Qatar', 'Republic of Congo',\n       'Kyrgyzstan', 'Costa Rica', 'Hong Kong', 'Montenegro', 'Liberia',\n       'Uganda', 'Namibia', 'Oman', 'Belize', 'Bosnia and Herzegovina',\n       'Tunisia', 'Macedonia', 'French Guiana', 'Nepal'], dtype=object)\n\n\n\ndf['Order Processing Time'] = (df['Shipment Datetime'] - df['Order Datetime']).dt.days\ndf['Order Processing Time'] = df['Order Processing Time'].apply(lambda x: 0 if x == -1 else x)\n\ndf.sample(5)\n\n\n\n\n\n\n\n\n\nOrder ID\nOrder Item ID\nOrder YearMonth\nOrder Quantity\nProduct Department\nProduct Category\nProduct Name\nCustomer ID\nCustomer Market\nCustomer Region\n...\nGross Sales\nDiscount %\nProfit\nYear Month\nWarehouse Inventory\nInventory Cost Per Unit\nWarehouse Order Fulfillment (days)\nOrder Datetime\nShipment Datetime\nOrder Processing Time\n\n\n\n\n64844\n47655\n119156\n201611\n1\nFan Shop\nFishing\nField & Stream Sportsman 16 Gun Fire Safe\n9500\nAfrica\nNorth Africa\n...\n400\n0.02\n200\n201704\n8\n2.18091\n4.9\n2016-11-26 15:19:00\n2016-12-02\n5\n\n\n652458\n59666\n149321\n201701\n4\nGolf\nWomen's Apparel\nNike Men's Dri-FIT Victory Golf Polo\n4749\nLATAM\nSouth America\n...\n200\n0.20\n125\n201705\n618\n1.72087\n6.6\n2017-01-08 15:05:00\n2017-01-10\n1\n\n\n664821\n47883\n119742\n201611\n3\nGolf\nWomen's Apparel\nNike Men's Dri-FIT Victory Golf Polo\n9489\nAfrica\nCentral Africa\n...\n150\n0.02\n125\n201602\n11\n1.94130\n6.6\n2016-11-29 23:11:00\n2016-12-01\n1\n\n\n958797\n27828\n69664\n201512\n1\nApparel\nMen's Footwear\nNike Men's CJ Elite 2 TD Football Cleat\n1131\nPacific Asia\nSoutheast Asia\n...\n130\n0.16\n65\n201503\n169\n2.20751\n7.0\n2015-12-27 13:30:00\n2015-12-31\n3\n\n\n404980\n39046\n97460\n201607\n5\nFan Shop\nIndoor/Outdoor Games\nO'Brien Men's Neoprene Life Vest\n4366\nNorth America\nSouth of USA\n...\n250\n0.02\n125\n201608\n528\n0.36478\n5.5\n2016-07-23 23:12:00\n2016-07-25\n1\n\n\n\n\n5 rows × 24 columns\n\n\n\n\n\ndf.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 1110063 entries, 0 to 1110062\nData columns (total 24 columns):\n #   Column                              Non-Null Count    Dtype         \n---  ------                              --------------    -----         \n 0   Order ID                            1110063 non-null  int64         \n 1   Order Item ID                       1110063 non-null  int64         \n 2   Order YearMonth                     1110063 non-null  int64         \n 3   Order Quantity                      1110063 non-null  int64         \n 4   Product Department                  1110063 non-null  object        \n 5   Product Category                    1110063 non-null  object        \n 6   Product Name                        1110063 non-null  object        \n 7   Customer ID                         1110063 non-null  int64         \n 8   Customer Market                     1110063 non-null  object        \n 9   Customer Region                     1110063 non-null  object        \n 10  Customer Country                    1110063 non-null  object        \n 11  Warehouse Country                   1110063 non-null  object        \n 12  Shipment Mode                       1110063 non-null  object        \n 13  Shipment Days - Scheduled           1110063 non-null  int64         \n 14  Gross Sales                         1110063 non-null  int64         \n 15  Discount %                          1110063 non-null  float64       \n 16  Profit                              1110063 non-null  int64         \n 17  Year Month                          1110063 non-null  int64         \n 18  Warehouse Inventory                 1110063 non-null  int64         \n 19  Inventory Cost Per Unit             1110063 non-null  float64       \n 20  Warehouse Order Fulfillment (days)  1110063 non-null  float64       \n 21  Order Datetime                      1110063 non-null  datetime64[ns]\n 22  Shipment Datetime                   1110063 non-null  datetime64[ns]\n 23  Order Processing Time               1110063 non-null  int64         \ndtypes: datetime64[ns](2), float64(3), int64(11), object(8)\nmemory usage: 203.3+ MB\n\n\n\n#Total Cost of Inventory is a significant financial metric in supply chain management that calculates the overall cost associated with holding and managing inventory.\ndf['Storage_Cost'] = df['Inventory Cost Per Unit']*df['Warehouse Inventory']\n\n\n#Profit Margin helps to assessing the profitability of the supply chain operations. It provides insights into the effectiveness of cost control and pricing strategies, enabling organizations to make adjustments to enhance overall profitability.\ndf['Profit_Margin'] = (df['Profit'] / df['Gross Sales']*100)\n\n\nimport matplotlib.pyplot as plt\n\n# Calculate the top 5 profitable product groups\ntop_5_product_groups = df.groupby('Product Name')['Profit_Margin'].mean().sort_values(ascending=False).head(5)\n\n# Extract product names and profit margins\nproduct_names = top_5_product_groups.index.to_list()\nprofit_margins = top_5_product_groups.values.tolist()\n\n# Create a pie chart\nplt.figure(figsize=(10, 7))\nplt.pie(profit_margins, labels=product_names, autopct=\"%1.1f%%\")\nplt.title(\"Top 5 Profitable Product Groups\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n# Calculate the top 5 products with highest inventory cost\ntop_5_products_inventory_cost = df.groupby('Product Name')['Inventory Cost Per Unit'].sum().sort_values(ascending=False).head(5)\n\n# Extract product names and inventory cost\nproduct_names = top_5_products_inventory_cost.index.to_list()\ninventory_cost = top_5_products_inventory_cost.values.tolist()\n\n# Create a bar chart\nplt.figure(figsize=(10, 7))\nplt.bar(product_names, inventory_cost)\nplt.title(\"Top 5 Products with Highest Inventory Cost\")\nplt.xlabel(\"Product Name\")\nplt.ylabel(\"Inventory Cost\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n# Calculate average profit per product department\navg_profit_by_department = df.groupby('Product Department')['Profit'].mean().sort_values(ascending=False)\n\n# Extract product department names and average profit\ndepartment_names = avg_profit_by_department.index.to_list()\navg_profit = avg_profit_by_department.values.tolist()\n\n# Create a bar chart\nplt.figure(figsize=(10, 7))\nplt.bar(department_names, avg_profit)\nplt.title(\"Average Profit by Product Department\")\nplt.xlabel(\"Product Department\")\nplt.ylabel(\"Average Profit\")\nplt.show()\n\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\n# Calculate the inventory storage cost per product department\nstorage_cost_by_department = df.groupby('Product Department')['Storage_Cost'].sum()\n\n# Extract product department names and storage cost\ndepartment_names = storage_cost_by_department.index.to_list()\nstorage_cost = storage_cost_by_department.values.tolist()\n\n# Create a bar chart\nplt.figure(figsize=(10, 7))\nplt.bar(department_names, storage_cost)\nplt.title(\"Inventory Storage Cost by Product Department\")\nplt.xlabel(\"Product Department\")\nplt.ylabel(\"Inventory Storage Cost\")\nplt.show()\n\n\n\n\n\n\n\n\n\n# Calculate the supply chain risk assessment score\ndf['Supply Chain Risk Assessment'] = (df['Order Processing Time'] + df['Storage_Cost'] + df['Inventory Cost Per Unit']) / df['Profit_Margin']\n\n# Display the supply chain risk assessment score for each product\ndf['Supply Chain Risk Assessment'].head()\n\n0    0.127830\n1    0.144369\n2    0.108093\n3    0.369390\n4    6.685936\nName: Supply Chain Risk Assessment, dtype: float64\n\n\n\n\nimport numpy as np\n# Import necessary libraries\nfrom sklearn.cluster import KMeans\n\n# Extract relevant data for clustering\ndata = df[['Order Processing Time', 'Storage_Cost', 'Inventory Cost Per Unit']]\n\n# Determine the optimal number of clusters using the elbow method\ninertia_scores = []\ncluster_num = []\nfor n in range(2, 10):\n    kmeans = KMeans(n_clusters=n, init='k-means++', max_iter=300, n_init=10, random_state=0)\n    kmeans.fit(data)\n    inertia_scores.append(kmeans.inertia_)\n    cluster_num.append(n)\n\n# Select the optimal number of clusters based on the elbow method\noptimal_clusters = cluster_num[np.argmin(inertia_scores)]\n\n# Perform K-means clustering with the optimal number of clusters\nkmeans = KMeans(n_clusters=optimal_clusters, init='k-means++', max_iter=300, n_init=10, random_state=0)\nkmeans.fit(data)\n\n# Add cluster labels to the DataFrame\ndf['Customer Segment'] = kmeans.labels_\n\n# Analyze customer segments\ndf.groupby('Customer Segment').agg({'Order Processing Time': 'mean', 'Storage_Cost': 'mean', 'Inventory Cost Per Unit': 'mean'})\n\n\n\n\n\n\n\n\n\nOrder Processing Time\nStorage_Cost\nInventory Cost Per Unit\n\n\nCustomer Segment\n\n\n\n\n\n\n\n0\n1.755741\n1180.399819\n2.193236\n\n\n1\n2.847509\n147.768049\n1.209536\n\n\n2\n3.983609\n549.155431\n1.408840\n\n\n3\n1.572926\n1814.635635\n2.003120\n\n\n4\n491.562967\n145.666048\n1.146551\n\n\n5\n-495.419188\n142.475131\n1.145064\n\n\n6\n3.629650\n312.039287\n1.418111\n\n\n7\n2.682289\n27.974873\n1.090038\n\n\n8\n1.989444\n813.350438\n1.629056\n\n\n\n\n\n\n\n\n\n# prompt: plot the customer segment in pie chart\n\nimport matplotlib.pyplot as plt\n# Calculate the number of customers in each segment\nsegment_counts = df['Customer Segment'].value_counts()\n\n# Extract segment labels and counts\nlabels = segment_counts.index.to_list()\ncounts = segment_counts.values.tolist()\n\n# Create a pie chart\nplt.figure(figsize=(10, 7))\nplt.pie(counts, labels=labels, autopct=\"%1.1f%%\")\nplt.title(\"Customer Segmentation\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport seaborn as sns\n# Monthly Sales Trends\nplt.figure(figsize=(10, 6))\nsns.lineplot(x='Order YearMonth', y='Gross Sales', data=df, estimator='sum', ci=None)\nplt.title('Monthly Sales Trends')\nplt.xlabel('Order YearMonth')\nplt.ylabel('Total Gross Sales')\nplt.show()\n\n/var/folders/4z/1l1s8bz96kd3yz0ts7htzv1c0000gn/T/ipykernel_40331/149833508.py:4: FutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n\n  sns.lineplot(x='Order YearMonth', y='Gross Sales', data=df, estimator='sum', ci=None)\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Product Department-wise Sales\nplt.figure(figsize=(10, 6))\nsns.barplot(x='Product Department', y='Gross Sales', data=df, estimator=sum, ci=None)\nplt.title('Product Department-wise Sales')\nplt.xlabel('Product Department')\nplt.ylabel('Total Gross Sales')\nplt.xticks(rotation=45, ha='right')\nplt.show()\n\n/var/folders/4z/1l1s8bz96kd3yz0ts7htzv1c0000gn/T/ipykernel_40331/855195561.py:3: FutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n\n  sns.barplot(x='Product Department', y='Gross Sales', data=df, estimator=sum, ci=None)\n\n\n\n\n\n\n\n\n\n\n# Customer Region-wise Sales\nplt.figure(figsize=(10, 6))\ndf_region = df.groupby('Customer Region')['Gross Sales'].sum().reset_index()\nsns.barplot(x='Customer Region', y='Gross Sales', data=df_region)\nplt.title('Customer Region-wise Sales')\nplt.xlabel('Customer Region')\nplt.ylabel('Total Gross Sales')\nplt.xticks(rotation=45, ha='right')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Discount vs. Profit\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x='Discount %', y='Profit', data=df)\nplt.title('Discount vs. Profit')\nplt.xlabel('Discount %')\nplt.ylabel('Profit')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Distribution of Order Quantity\nplt.figure(figsize=(10, 6))\nsns.histplot(df['Order Quantity'], bins=20, kde=True)\nplt.title('Distribution of Order Quantity')\nplt.xlabel('Order Quantity')\nplt.ylabel('Frequency')\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Top Products by Gross Sales\ntop_products = df.groupby('Product Name')['Gross Sales'].sum().sort_values(ascending=False).head(10)\nplt.figure(figsize=(10, 6))\ntop_products.plot(kind='barh')\nplt.title('Top 10 Products by Gross Sales')\nplt.xlabel('Total Gross Sales')\nplt.ylabel('Product Name')\nplt.gca().invert_yaxis()  # Invert y-axis to show top products at the top\nplt.show()\n\n\n\n\n\n\n\n\n\n# Customer Market-wise Sales\nplt.figure(figsize=(12, 8))\nsns.barplot(x='Customer Market', y='Gross Sales', hue='Product Department', data=df, estimator=sum, ci=None)\nplt.title('Customer Market-wise Sales by Product Department')\nplt.xlabel('Customer Market')\nplt.ylabel('Total Gross Sales')\nplt.legend(title='Product Department', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n\n/var/folders/4z/1l1s8bz96kd3yz0ts7htzv1c0000gn/T/ipykernel_40331/1500118382.py:3: FutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n\n  sns.barplot(x='Customer Market', y='Gross Sales', hue='Product Department', data=df, estimator=sum, ci=None)\n\n\n\n\n\n\n\n\n\n\n# Order Processing Time Distribution\nplt.figure(figsize=(10, 6))\nsns.histplot(df['Order Processing Time'], bins=20, kde=True)\nplt.title('Distribution of Order Processing Time')\nplt.xlabel('Order Processing Time (days)')\nplt.ylabel('Frequency')\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Warehouse Inventory vs. Warehouse Order Fulfillment (days)\nplt.figure(figsize=(10, 6))\nsns.scatterplot(x='Warehouse Inventory', y='Warehouse Order Fulfillment (days)', data=df)\nplt.title('Warehouse Inventory vs. Warehouse Order Fulfillment Time')\nplt.xlabel('Warehouse Inventory')\nplt.ylabel('Warehouse Order Fulfillment (days)')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Profit Margin by Product Department\ndf['Profit Margin'] = (df['Profit'] / df['Gross Sales']) * 100\nplt.figure(figsize=(12, 8))\nsns.barplot(x='Product Department', y='Profit Margin', data=df)\nplt.title('Profit Margin by Product Department')\nplt.xlabel('Product Department')\nplt.ylabel('Profit Margin (%)')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Customer Market-wise Order Quantity\nplt.figure(figsize=(12, 8))\nsns.barplot(x='Customer Market', y='Order Quantity', data=df, estimator=sum, ci=None)\nplt.title('Customer Market-wise Order Quantity')\nplt.xlabel('Customer Market')\nplt.ylabel('Total Order Quantity')\nplt.show()\n\n/var/folders/4z/1l1s8bz96kd3yz0ts7htzv1c0000gn/T/ipykernel_40331/1403297970.py:3: FutureWarning: \n\nThe `ci` parameter is deprecated. Use `errorbar=None` for the same effect.\n\n  sns.barplot(x='Customer Market', y='Order Quantity', data=df, estimator=sum, ci=None)\n\n\n\n\n\n\n\n\n\n\n# Customer Region-wise Sales Growth\nsales_growth = df.groupby(['Customer Region', 'Order YearMonth'])['Gross Sales'].sum().reset_index()\nplt.figure(figsize=(12, 8))\nsns.lineplot(x='Order YearMonth', y='Gross Sales', hue='Customer Region', data=sales_growth)\nplt.title('Customer Region-wise Sales Growth')\nplt.xlabel('Order YearMonth')\nplt.ylabel('Total Gross Sales')\nplt.grid(True)\nplt.legend(title='Customer Region', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Pairplot with Order Quantity and Gross Sales\nsns.pairplot(df[['Order Quantity', 'Gross Sales', 'Discount %', 'Profit']])\nplt.show()\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n# Interactive Choropleth Map (using Plotly)\nimport plotly.express as px\nregion_sales = df.groupby('Customer Region')['Gross Sales'].sum().reset_index()\nfig = px.choropleth(region_sales, locations='Customer Region', locationmode='country names', color='Gross Sales',\n                    hover_name='Customer Region', color_continuous_scale='Viridis')\nfig.update_layout(title_text='Customer Region-wise Gross Sales')\nfig.show()\n\n                                                \n\n\n\n# 3D Scatter Plot\nfrom mpl_toolkits.mplot3d import Axes3D\nfig = plt.figure(figsize=(10, 8))\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['Gross Sales'], df['Profit'], df['Discount %'], c='blue', marker='o')\nax.set_xlabel('Gross Sales')\nax.set_ylabel('Profit')\nax.set_zlabel('Discount %')\nplt.title('3D Scatter Plot')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Boxplot of Order Processing Time by Product Category\nplt.figure(figsize=(12, 8))\nsns.boxplot(x='Product Category', y='Order Processing Time', data=df)\nplt.title('Boxplot of Order Processing Time by Product Category')\nplt.xlabel('Product Category')\nplt.ylabel('Order Processing Time (days)')\nplt.xticks(rotation=45)\nplt.show()"
  },
  {
    "objectID": "20_reproducibility.html",
    "href": "20_reproducibility.html",
    "title": "20: Reproducibility",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#provide-instructions-on-how-to-reproduce-the-project. Describe your contributions below.",
    "crumbs": [
      "Project and software dev",
      "20: Reproducibility"
    ]
  },
  {
    "objectID": "18_continuous_integration.html",
    "href": "18_continuous_integration.html",
    "title": "18: cont. integration",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#continuous-integration. Describe your contributions below.",
    "crumbs": [
      "Project and software dev",
      "18: cont. integration"
    ]
  },
  {
    "objectID": "16_tests.html",
    "href": "16_tests.html",
    "title": "16: Tests",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#tests-using-pytest. Describe your contributions below.",
    "crumbs": [
      "Project and software dev",
      "16: Tests"
    ]
  },
  {
    "objectID": "14_poster.html",
    "href": "14_poster.html",
    "title": "14: Poster",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#poster. Describe your contributions below.",
    "crumbs": [
      "Data Wrangling: Communicating results",
      "14: Poster"
    ]
  },
  {
    "objectID": "12_webpage.html",
    "href": "12_webpage.html",
    "title": "12: Webpage",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#creation-web-page-to-communicate-your-project-methodology-analysis. Describe your contributions below.",
    "crumbs": [
      "Data Wrangling: Communicating results",
      "12: Webpage"
    ]
  },
  {
    "objectID": "10_statistical_ML.html",
    "href": "10_statistical_ML.html",
    "title": "10: Statistical analisys",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#data-analysis Describe your contributions below.",
    "crumbs": [
      "Data Wrangling: Analysis",
      "10: Statistical analisys"
    ]
  },
  {
    "objectID": "08_backup_external_service.html",
    "href": "08_backup_external_service.html",
    "title": "8: External services",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#backup-of-the-raw-and-tidied-data-on-external-storage-service. Describe your contributions below.",
    "crumbs": [
      "Backups",
      "8: External services"
    ]
  },
  {
    "objectID": "06_test_quality.html",
    "href": "06_test_quality.html",
    "title": "6: Test data quality",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#tests-for-data-quality. Describe your contributions below.",
    "crumbs": [
      "Data Wrangling: enrichment/cleaning",
      "6: Test data quality"
    ]
  },
  {
    "objectID": "04_enrichment.html",
    "href": "04_enrichment.html",
    "title": "4: Data enrichment",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#data-enrichment. Describe your contributions below.\nWe are trying to scrape the data from the website but due to security reasons, no company is allowing to scrape the data. We plan to calculative columns to the dataframe. * * *",
    "crumbs": [
      "Data Wrangling: enrichment/cleaning",
      "4: Data enrichment"
    ]
  },
  {
    "objectID": "02_automated_retrieval.html",
    "href": "02_automated_retrieval.html",
    "title": "2: Retrieval of raw data",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#retrieval-of-the-raw-data for information. Describe your contributions below.\nThe data source is Kaggle (https://www.kaggle.com/datasets/shashwatwork/dataco-smart-supply-chain-for-big-data-analysis?select=DataCoSupplyChainDataset.csv). * * *",
    "crumbs": [
      "Data Wrangling: retrieval",
      "2: Retrieval of raw data"
    ]
  },
  {
    "objectID": "01_document_sources.html",
    "href": "01_document_sources.html",
    "title": "1: Data Sources",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#documenting-data-sources for information. Describe your contributions below.\nThe project provides a real-world dataset focusing on supply chain analytics. We will help solve key shipment and inventory management challenges, analyze supply chain inefficiencies, and create insightful visualisations to inform business stakeholders about potential problems and propose structural business improvements.\nThe primary focus is on addressing key challenges related to shipment and inventory management within the supply chain. The dataset provides three data tables including order_and_shipment, inventory and fulfillment. After examining the data fields, the dataset generally represents the following key information:\n-Customer: General information about customers including identifiers and addresses\n-Order: Information about the order including date of order, product and quantity ordered, order value\n-Shipment: Shipping information including shipping date, shipping mode\n-Product: Specific information about the ordered item including product name, product category, product department\n-Warehouse Inventory: Information on inventory management for each product name including monthly inventory, warehouse location, storage costs, order fulfillment * * *",
    "crumbs": [
      "Data Wrangling: retrieval",
      "1: Data Sources"
    ]
  },
  {
    "objectID": "03_raw_to_tabular.html",
    "href": "03_raw_to_tabular.html",
    "title": "3: From raw to tabular data",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#from-raw-data-to-tidy-tabular-data-in-pandas. Describe your contributions below.\nThe dataset contains 3 csv files, which were fulfilment, orders and shipment which are joined on Product Name. The 3 csv files are combined into one and a pandas dataframe is created * * *",
    "crumbs": [
      "Data Wrangling: retrieval",
      "3: From raw to tabular data"
    ]
  },
  {
    "objectID": "05_cleaning.html",
    "href": "05_cleaning.html",
    "title": "5: Data cleaning",
    "section": "",
    "text": "About this site See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#data-cleaning. Describe your contributions below.\nWe will clean the daatset by handling missing values in the dataset if found.We will also remove unwanted characters in the column headings as found * * *",
    "crumbs": [
      "Data Wrangling: enrichment/cleaning",
      "5: Data cleaning"
    ]
  },
  {
    "objectID": "07_format_conversion.html",
    "href": "07_format_conversion.html",
    "title": "7: Backup in several formats",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#store-your-data-in-at-least-3-different-formats-e.g.-sqlite3-csv-excel.\nDescribe your contributions below.",
    "crumbs": [
      "Backups",
      "7: Backup in several formats"
    ]
  },
  {
    "objectID": "09_summary_stats.html",
    "href": "09_summary_stats.html",
    "title": "9: Summary statistics",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#computation-of-meaningful-summary-statistics. Describe your contributions below.\nWe will calculate the mean, median and percentage of profit, costs of the product. We wil also calculate teh discount percentage of the products * * *",
    "crumbs": [
      "Data Wrangling: Analysis",
      "9: Summary statistics"
    ]
  },
  {
    "objectID": "11_visualizations.html",
    "href": "11_visualizations.html",
    "title": "11: Visualizations",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#around-4-6-or-more-visualizations-related-to-the-dataset Describe your contributions below.\nWe have not yet decided what visualizations we will explore * * *",
    "crumbs": [
      "Data Wrangling: Analysis",
      "11: Visualizations"
    ]
  },
  {
    "objectID": "13_interactive.html",
    "href": "13_interactive.html",
    "title": "13: interactivity",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#interactive-data-widget. Describe your contributions below.",
    "crumbs": [
      "Data Wrangling: Communicating results",
      "13: interactivity"
    ]
  },
  {
    "objectID": "15_commit.html",
    "href": "15_commit.html",
    "title": "15: Git commit history",
    "section": "",
    "text": "See https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#clear-commit-history. Describe your contributions below.",
    "crumbs": [
      "Project and software dev",
      "15: Git commit history"
    ]
  },
  {
    "objectID": "17_continuous_testing.html",
    "href": "17_continuous_testing.html",
    "title": "17: cont. testing",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#continuous-testing. Describe your contributions below.",
    "crumbs": [
      "Project and software dev",
      "17: cont. testing"
    ]
  },
  {
    "objectID": "19_python_package.html",
    "href": "19_python_package.html",
    "title": "19: python package (optional)",
    "section": "",
    "text": "https://bellecp.github.io/597-Data-Wrangling-Spring-2024/project.html#optional-build-your-own-external-python-package-and-use-this-package-as-a-dependency-in-the-main-project. Describe your contributions below.",
    "crumbs": [
      "Project and software dev",
      "19: python package (optional)"
    ]
  },
  {
    "objectID": "COVID_DW.html",
    "href": "COVID_DW.html",
    "title": "Project Group XXX",
    "section": "",
    "text": "!pip install pandas_profiling\n\nCollecting pandas_profiling\n  Downloading pandas_profiling-3.6.6-py2.py3-none-any.whl (324 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 324.4/324.4 kB 4.2 MB/s eta 0:00:00\nCollecting ydata-profiling (from pandas_profiling)\n  Downloading ydata_profiling-4.7.0-py2.py3-none-any.whl (357 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 357.9/357.9 kB 11.1 MB/s eta 0:00:00\nRequirement already satisfied: scipy&lt;1.12,&gt;=1.4.1 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (1.11.4)\nRequirement already satisfied: pandas!=1.4.0,&lt;3,&gt;1.1 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (2.0.3)\nRequirement already satisfied: matplotlib&lt;3.9,&gt;=3.2 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (3.7.1)\nRequirement already satisfied: pydantic&gt;=2 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (2.7.0)\nRequirement already satisfied: PyYAML&lt;6.1,&gt;=5.0.0 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (6.0.1)\nRequirement already satisfied: jinja2&lt;3.2,&gt;=2.11.1 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (3.1.3)\nCollecting visions[type_image_path]&lt;0.7.7,&gt;=0.7.5 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading visions-0.7.6-py3-none-any.whl (104 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 104.8/104.8 kB 7.6 MB/s eta 0:00:00\nRequirement already satisfied: numpy&lt;2,&gt;=1.16.0 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (1.25.2)\nCollecting htmlmin==0.1.12 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading htmlmin-0.1.12.tar.gz (19 kB)\n  Preparing metadata (setup.py) ... done\nCollecting phik&lt;0.13,&gt;=0.11.1 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading phik-0.12.4-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (686 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 686.1/686.1 kB 10.5 MB/s eta 0:00:00\nRequirement already satisfied: requests&lt;3,&gt;=2.24.0 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (2.31.0)\nRequirement already satisfied: tqdm&lt;5,&gt;=4.48.2 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (4.66.2)\nCollecting seaborn&lt;0.13,&gt;=0.10.1 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading seaborn-0.12.2-py3-none-any.whl (293 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 293.3/293.3 kB 12.9 MB/s eta 0:00:00\nCollecting multimethod&lt;2,&gt;=1.4 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading multimethod-1.11.2-py3-none-any.whl (10 kB)\nRequirement already satisfied: statsmodels&lt;1,&gt;=0.13.2 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (0.14.2)\nCollecting typeguard&lt;5,&gt;=4.1.2 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading typeguard-4.2.1-py3-none-any.whl (34 kB)\nCollecting imagehash==4.3.1 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading ImageHash-4.3.1-py2.py3-none-any.whl (296 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 296.5/296.5 kB 5.8 MB/s eta 0:00:00\nRequirement already satisfied: wordcloud&gt;=1.9.1 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (1.9.3)\nCollecting dacite&gt;=1.8 (from ydata-profiling-&gt;pandas_profiling)\n  Downloading dacite-1.8.1-py3-none-any.whl (14 kB)\nRequirement already satisfied: numba&lt;1,&gt;=0.56.0 in /usr/local/lib/python3.10/dist-packages (from ydata-profiling-&gt;pandas_profiling) (0.58.1)\nRequirement already satisfied: PyWavelets in /usr/local/lib/python3.10/dist-packages (from imagehash==4.3.1-&gt;ydata-profiling-&gt;pandas_profiling) (1.6.0)\nRequirement already satisfied: pillow in /usr/local/lib/python3.10/dist-packages (from imagehash==4.3.1-&gt;ydata-profiling-&gt;pandas_profiling) (9.4.0)\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /usr/local/lib/python3.10/dist-packages (from jinja2&lt;3.2,&gt;=2.11.1-&gt;ydata-profiling-&gt;pandas_profiling) (2.1.5)\nRequirement already satisfied: contourpy&gt;=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (1.2.1)\nRequirement already satisfied: cycler&gt;=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (0.12.1)\nRequirement already satisfied: fonttools&gt;=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (4.51.0)\nRequirement already satisfied: kiwisolver&gt;=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (1.4.5)\nRequirement already satisfied: packaging&gt;=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (24.0)\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (3.1.2)\nRequirement already satisfied: python-dateutil&gt;=2.7 in /usr/local/lib/python3.10/dist-packages (from matplotlib&lt;3.9,&gt;=3.2-&gt;ydata-profiling-&gt;pandas_profiling) (2.8.2)\nRequirement already satisfied: llvmlite&lt;0.42,&gt;=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba&lt;1,&gt;=0.56.0-&gt;ydata-profiling-&gt;pandas_profiling) (0.41.1)\nRequirement already satisfied: pytz&gt;=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas!=1.4.0,&lt;3,&gt;1.1-&gt;ydata-profiling-&gt;pandas_profiling) (2023.4)\nRequirement already satisfied: tzdata&gt;=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas!=1.4.0,&lt;3,&gt;1.1-&gt;ydata-profiling-&gt;pandas_profiling) (2024.1)\nRequirement already satisfied: joblib&gt;=0.14.1 in /usr/local/lib/python3.10/dist-packages (from phik&lt;0.13,&gt;=0.11.1-&gt;ydata-profiling-&gt;pandas_profiling) (1.4.0)\nRequirement already satisfied: annotated-types&gt;=0.4.0 in /usr/local/lib/python3.10/dist-packages (from pydantic&gt;=2-&gt;ydata-profiling-&gt;pandas_profiling) (0.6.0)\nRequirement already satisfied: pydantic-core==2.18.1 in /usr/local/lib/python3.10/dist-packages (from pydantic&gt;=2-&gt;ydata-profiling-&gt;pandas_profiling) (2.18.1)\nRequirement already satisfied: typing-extensions&gt;=4.6.1 in /usr/local/lib/python3.10/dist-packages (from pydantic&gt;=2-&gt;ydata-profiling-&gt;pandas_profiling) (4.11.0)\nRequirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /usr/local/lib/python3.10/dist-packages (from requests&lt;3,&gt;=2.24.0-&gt;ydata-profiling-&gt;pandas_profiling) (3.3.2)\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /usr/local/lib/python3.10/dist-packages (from requests&lt;3,&gt;=2.24.0-&gt;ydata-profiling-&gt;pandas_profiling) (3.7)\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests&lt;3,&gt;=2.24.0-&gt;ydata-profiling-&gt;pandas_profiling) (2.0.7)\nRequirement already satisfied: certifi&gt;=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests&lt;3,&gt;=2.24.0-&gt;ydata-profiling-&gt;pandas_profiling) (2024.2.2)\nRequirement already satisfied: patsy&gt;=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels&lt;1,&gt;=0.13.2-&gt;ydata-profiling-&gt;pandas_profiling) (0.5.6)\nRequirement already satisfied: attrs&gt;=19.3.0 in /usr/local/lib/python3.10/dist-packages (from visions[type_image_path]&lt;0.7.7,&gt;=0.7.5-&gt;ydata-profiling-&gt;pandas_profiling) (23.2.0)\nRequirement already satisfied: networkx&gt;=2.4 in /usr/local/lib/python3.10/dist-packages (from visions[type_image_path]&lt;0.7.7,&gt;=0.7.5-&gt;ydata-profiling-&gt;pandas_profiling) (3.3)\nRequirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy&gt;=0.5.6-&gt;statsmodels&lt;1,&gt;=0.13.2-&gt;ydata-profiling-&gt;pandas_profiling) (1.16.0)\nBuilding wheels for collected packages: htmlmin\n  Building wheel for htmlmin (setup.py) ... done\n  Created wheel for htmlmin: filename=htmlmin-0.1.12-py3-none-any.whl size=27080 sha256=fc99574a12f602ed52e73a0cfded9faa3b39026c2f10aba39e0bd12e041a5adb\n  Stored in directory: /root/.cache/pip/wheels/dd/91/29/a79cecb328d01739e64017b6fb9a1ab9d8cb1853098ec5966d\nSuccessfully built htmlmin\nInstalling collected packages: htmlmin, typeguard, multimethod, dacite, imagehash, visions, seaborn, phik, ydata-profiling, pandas_profiling\n  Attempting uninstall: seaborn\n    Found existing installation: seaborn 0.13.1\n    Uninstalling seaborn-0.13.1:\n      Successfully uninstalled seaborn-0.13.1\nSuccessfully installed dacite-1.8.1 htmlmin-0.1.12 imagehash-4.3.1 multimethod-1.11.2 pandas_profiling-3.6.6 phik-0.12.4 seaborn-0.12.2 typeguard-4.2.1 visions-0.7.6 ydata-profiling-4.7.0\n\n\n\nfrom bs4 import BeautifulSoup as soup\nfrom datetime import date,datetime\nfrom urllib.request import Request,urlopen\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport plotly.offline as py\nimport seaborn as sns\nimport gc\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n# Data Resampling\nfrom sklearn.utils import resample\n# Data Feature Selection\nfrom sklearn.feature_selection import SelectKBest\nfrom sklearn.feature_selection import chi2\n# Data Splitting\nfrom sklearn.model_selection import train_test_split\n# Data Scaling\nfrom sklearn.preprocessing import MinMaxScaler\n# Data Modeling\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.neural_network import MLPClassifier\nfrom sklearn.metrics import confusion_matrix, accuracy_score, roc_curve, classification_report\n# Hyperparameter Tuning\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom sklearn.model_selection import GridSearchCV\nfrom random import choices\ncolor_ls = '1234567890'*10\ndef color():\n    return '#'+''.join(choices(color_ls , k=6))\n\n\ntoday = datetime.now()\nyesterday_str = \"%s %d,%d\" %(date.today().strftime(\"%b\"),today.day-1,today.year)\nyesterday_str\n\n'Apr 19,2024'\n\n\n\n#WEB SCRAPPING\nurl = \"https://www.worldometers.info/coronavirus/#countries\"\nreq = Request(url,headers={'User-Agent':\"Google Chrome\"})\nwebpage = urlopen(req)\npage_soup = soup(webpage,\"html.parser\")\n\n\ntable = page_soup.findAll(\"table\",{\"id\":\"main_table_countries_yesterday\"})\ncontainers = table[0].findAll(\"tr\",{\"style\":\"\"})\ntitle = containers[0]\ndel containers[0]\nall_data = []\nclean = True\nfor country in containers :\n  country_data = []\n  country_container = country.findAll(\"td\")\n  if country_container[1].text == 'China':\n    continue\n  for i in range(1,len(country_container)):\n    final_feature = country_container[i].text\n    if clean:\n      if i != 1 and i != len(country_container)-1:\n        final_feature = final_feature.replace(\",\",\"\")\n        if final_feature.find('+') != -1:\n          final_feature = final_feature.replace(\"+\",\"\")\n          final_feature = float(final_feature)\n        elif final_feature.find('-') != -1:\n          final_feature = final_feature.replace(\"-\",\"\")\n          final_feature = float(final_feature)*-1\n    if final_feature == 'N/A':\n      final_feature = 0\n    elif final_feature == \"\" or final_feature == \" \":\n      final_feature = -1\n    country_data.append(final_feature)\n  all_data.append(country_data)\n\n\ndf= pd.DataFrame(all_data)\ndf.drop([15,16,17,18,19,20],inplace = True, axis= 1)\ndf.head(10)\n\n\n\n  \n    \n\n\n\n\n\n\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n\n\n\n\n0\nWorld\n704753890\n3959.0\n7010681\n57.0\n675619021\n14953.0\n22124188\n34791\n90413\n899.4\n-1\n-1\n-1\nAll\n\n\n1\nUSA\n111820082\n1151.0\n1219487\n7.0\n109814428\n10109.0\n786167\n940\n333985\n3642\n1186851502\n3544901\n334805269\nNorth America\n\n\n2\nIndia\n45035393\n68.0\n533570\n-1.0\n0\n0.0\n0\n0\n32016\n379\n935879495\n665334\n1406631776\nAsia\n\n\n3\nGermany\n38828995\n73.0\n183027\n16.0\n38240600\n-1.0\n405368\n0\n462891\n2182\n122332384\n1458359\n83883596\nEurope\n\n\n4\nBrazil\n38743918\n-1.0\n711380\n-1.0\n36249161\n-1.0\n1783377\n0\n179908\n3303\n63776166\n296146\n215353593\nSouth America\n\n\n5\nJapan\n33803572\n-1.0\n74694\n-1.0\n0\n0.0\n0\n0\n269169\n595\n100414883\n799578\n125584838\nAsia\n\n\n6\nItaly\n26723249\n-1.0\n196487\n-1.0\n26361218\n-1.0\n165544\n22\n443445\n3261\n281126449\n4665010\n60262770\nEurope\n\n\n7\nRussia\n24124215\n-1.0\n402756\n-1.0\n23545818\n-1.0\n175641\n0\n165454\n2762\n273400000\n1875095\n145805947\nEurope\n\n\n8\nTurkey\n17232066\n-1.0\n102174\n-1.0\n0\n0.0\n0\n0\n201399\n1194\n162743369\n1902052\n85561976\nAsia\n\n\n9\nSpain\n13914811\n-1.0\n121760\n-1.0\n13762417\n-1.0\n30634\n231\n297840\n2606\n471036328\n10082298\n46719142\nEurope\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\ncolumn_labels = [\"Country\",\"Total Cases\",\"New Cases\",\"Total Deaths\",\"New Deaths\",\"Total Recovered\",\"New Recovered\",\"Active Cases\",\"Serios/Critical\",\"Total Cases/1M\",\"Deaths/1M\",\"Total Tests\",\"Test/1M\",\"Population\",\"Continent\"]\ndf.columns = column_labels\ndf.head(10)\n\n\n\n  \n    \n\n\n\n\n\n\nCountry\nTotal Cases\nNew Cases\nTotal Deaths\nNew Deaths\nTotal Recovered\nNew Recovered\nActive Cases\nSerios/Critical\nTotal Cases/1M\nDeaths/1M\nTotal Tests\nTest/1M\nPopulation\nContinent\n\n\n\n\n0\nWorld\n704753890\n3959.0\n7010681\n57.0\n675619021\n14953.0\n22124188\n34791\n90413\n899.4\n-1\n-1\n-1\nAll\n\n\n1\nUSA\n111820082\n1151.0\n1219487\n7.0\n109814428\n10109.0\n786167\n940\n333985\n3642\n1186851502\n3544901\n334805269\nNorth America\n\n\n2\nIndia\n45035393\n68.0\n533570\n-1.0\n0\n0.0\n0\n0\n32016\n379\n935879495\n665334\n1406631776\nAsia\n\n\n3\nGermany\n38828995\n73.0\n183027\n16.0\n38240600\n-1.0\n405368\n0\n462891\n2182\n122332384\n1458359\n83883596\nEurope\n\n\n4\nBrazil\n38743918\n-1.0\n711380\n-1.0\n36249161\n-1.0\n1783377\n0\n179908\n3303\n63776166\n296146\n215353593\nSouth America\n\n\n5\nJapan\n33803572\n-1.0\n74694\n-1.0\n0\n0.0\n0\n0\n269169\n595\n100414883\n799578\n125584838\nAsia\n\n\n6\nItaly\n26723249\n-1.0\n196487\n-1.0\n26361218\n-1.0\n165544\n22\n443445\n3261\n281126449\n4665010\n60262770\nEurope\n\n\n7\nRussia\n24124215\n-1.0\n402756\n-1.0\n23545818\n-1.0\n175641\n0\n165454\n2762\n273400000\n1875095\n145805947\nEurope\n\n\n8\nTurkey\n17232066\n-1.0\n102174\n-1.0\n0\n0.0\n0\n0\n201399\n1194\n162743369\n1902052\n85561976\nAsia\n\n\n9\nSpain\n13914811\n-1.0\n121760\n-1.0\n13762417\n-1.0\n30634\n231\n297840\n2606\n471036328\n10082298\n46719142\nEurope\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\n#converting data to numeric format\nfor label in df.columns:\n  if label != 'Country' and label !='Continent':\n    df[label]= pd.to_numeric(df[label])\n\n\ndf[\"%Inc Cases\"] = df[\"New Cases\"]/df[\"Total Cases\"]*100\ndf[\"%Inc Deaths\"] = df[\"New Deaths\"]/df[\"Total Deaths\"]*100\ndf[\"%Inc Recovered\"] = df[\"New Recovered\"]/df[\"Total Recovered\"]*100\ndf.head()\n\n\n\n  \n    \n\n\n\n\n\n\nCountry\nTotal Cases\nNew Cases\nTotal Deaths\nNew Deaths\nTotal Recovered\nNew Recovered\nActive Cases\nSerios/Critical\nTotal Cases/1M\nDeaths/1M\nTotal Tests\nTest/1M\nPopulation\nContinent\n%Inc Cases\n%Inc Deaths\n%Inc Recovered\n\n\n\n\n0\nWorld\n704753890\n3959.0\n7010681\n57.0\n675619021\n14953.0\n22124188\n34791\n90413.0\n899.4\n-1\n-1\n-1\nAll\n0.000562\n0.000813\n0.002213\n\n\n1\nUSA\n111820082\n1151.0\n1219487\n7.0\n109814428\n10109.0\n786167\n940\n333985.0\n3642.0\n1186851502\n3544901\n334805269\nNorth America\n0.001029\n0.000574\n0.009206\n\n\n2\nIndia\n45035393\n68.0\n533570\n-1.0\n0\n0.0\n0\n0\n32016.0\n379.0\n935879495\n665334\n1406631776\nAsia\n0.000151\n-0.000187\nNaN\n\n\n3\nGermany\n38828995\n73.0\n183027\n16.0\n38240600\n-1.0\n405368\n0\n462891.0\n2182.0\n122332384\n1458359\n83883596\nEurope\n0.000188\n0.008742\n-0.000003\n\n\n4\nBrazil\n38743918\n-1.0\n711380\n-1.0\n36249161\n-1.0\n1783377\n0\n179908.0\n3303.0\n63776166\n296146\n215353593\nSouth America\n-0.000003\n-0.000141\n-0.000003\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\nEXPLORATORY DATA ANALYSIS\n\ncases = df[[\"Total Recovered\",\"Active Cases\",\"Total Deaths\"]].loc[0]\ncases_df = pd.DataFrame(cases).reset_index()\ncases_df.columns = ['Type','Total']\ncases_df[\"Percentage\"] = np.round(100*cases_df['Total']/np.sum(cases_df[\"Total\"]),2)\ncases_df[\"virus\"] = ['COVID-19' for i in range(len(cases_df))]\ncases_df\n#plot percentage and virus\nfig = px.bar(cases_df,x=\"virus\",y=\"Percentage\",color=\"Type\",hover_data=[\"Total\"])\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\ncases = df[[\"New Cases\",\"New Recovered\",\"New Deaths\"]].loc[0]\ncases_df = pd.DataFrame(cases).reset_index()\ncases_df.columns = ['Type','Total']\ncases_df[\"Percentage\"] = np.round(100*cases_df['Total']/np.sum(cases_df[\"Total\"]),2)\ncases_df[\"virus\"] = ['COVID-19' for i in range(len(cases_df))]\ncases_df\n#plot percentage and virus\nfig = px.bar(cases_df,x=\"virus\",y=\"Percentage\",color=\"Type\",hover_data=[\"Total\"])\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\nper = np.round(df[[\"%Inc Cases\",\"%Inc Deaths\",\"%Inc Recovered\"]].loc[0],2)\nper_df = pd.DataFrame(per)\nper_df.columns = [\"%\"]\nfig = go.Figure()\nfig.add_trace(go.Bar(x= per_df.index , y = per_df[\"%\"] , marker_color = ['Yellow','blue','red']))\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n#CONTINENTS\ncontinent_df = df.groupby(\"Continent\").sum().drop(\"All\")\ncontinent_df = continent_df.reset_index()\ncontinent_df\n\n\n\n  \n    \n\n\n\n\n\n\nContinent\nCountry\nTotal Cases\nNew Cases\nTotal Deaths\nNew Deaths\nTotal Recovered\nNew Recovered\nActive Cases\nSerios/Critical\nTotal Cases/1M\nDeaths/1M\nTotal Tests\nTest/1M\nPopulation\n%Inc Cases\n%Inc Deaths\n%Inc Recovered\n\n\n\n\n0\nAfrica\nSouth AfricaMoroccoTunisiaEgyptLibyaEthiopiaRé...\n12735512\n-54.0\n253569\n-54.0\n9091424\n-47.0\n331499\n356\n1991266.0\n16684.0\n110445941\n10904366\n1356348893\n-0.217847\n85.570998\n-50.170643\n\n\n1\nAsia\nIndiaJapanTurkeyVietnamIranIndonesiaMalaysiaIs...\n166654250\n724.0\n1484539\n-7.0\n53866148\n-31.0\n1424053\n340\n5580338.0\n31423.0\n2159532568\n78326908\n3131766390\n-0.005323\n-8.392328\n-0.056270\n\n\n2\nAustralia/Oceania\nAustraliaNew ZealandNew CaledoniaFrench Polyne...\n14879633\n646.0\n32996\n-19.0\n14599387\n4286.0\n33714\n-5\n4734517.0\n9415.0\n91668186\n21293233\n43410351\n-1.502814\n-97.524827\n99.547004\n\n\n3\nEurope\nGermanyItalyRussiaSpainNetherlandsPolandAustri...\n170126755\n129.0\n1515107\n-23.0\n159167484\n79.0\n875695\n363\n16304245.0\n110677.0\n1771413542\n169925554\n543145341\n-0.027008\n-10.562851\n-0.002670\n\n\n4\nNorth America\nUSAMexicoCanadaGuatemalaCosta RicaCubaPanamaDo...\n131836272\n1116.0\n1695409\n-28.0\n126430561\n10435.0\n1333140\n1070\n8402531.0\n55808.0\n1325143163\n95149170\n597829588\n-0.261255\n-108.844516\n-0.247298\n\n\n5\nSouth America\nBrazilArgentinaColombiaChileBoliviaUruguayPara...\n64556094\n1205.0\n1109128\n-11.0\n60548914\n-9.0\n1999425\n621\n1880239.0\n24629.0\n203294124\n10262729\n385893335\n0.018477\n-0.428744\n-0.010687\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\n#COUNTRIES\ndf=df.drop([len(df)-1])\ncountry_df = df.drop([0])\ncountry_df\n\n\n\n  \n    \n\n\n\n\n\n\nCountry\nTotal Cases\nNew Cases\nTotal Deaths\nNew Deaths\nTotal Recovered\nNew Recovered\nActive Cases\nSerios/Critical\nTotal Cases/1M\nDeaths/1M\nTotal Tests\nTest/1M\nPopulation\nContinent\n%Inc Cases\n%Inc Deaths\n%Inc Recovered\n\n\n\n\n1\nUSA\n111820082\n1151.0\n1219487\n7.0\n109814428\n10109.0\n786167\n940\n333985.0\n3642.0\n1186851502\n3544901\n334805269\nNorth America\n0.001029\n0.000574\n0.009206\n\n\n2\nIndia\n45035393\n68.0\n533570\n-1.0\n0\n0.0\n0\n0\n32016.0\n379.0\n935879495\n665334\n1406631776\nAsia\n0.000151\n-0.000187\nNaN\n\n\n3\nGermany\n38828995\n73.0\n183027\n16.0\n38240600\n-1.0\n405368\n0\n462891.0\n2182.0\n122332384\n1458359\n83883596\nEurope\n0.000188\n0.008742\n-0.000003\n\n\n4\nBrazil\n38743918\n-1.0\n711380\n-1.0\n36249161\n-1.0\n1783377\n0\n179908.0\n3303.0\n63776166\n296146\n215353593\nSouth America\n-0.000003\n-0.000141\n-0.000003\n\n\n5\nJapan\n33803572\n-1.0\n74694\n-1.0\n0\n0.0\n0\n0\n269169.0\n595.0\n100414883\n799578\n125584838\nAsia\n-0.000003\n-0.001339\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n198\nTuvalu\n2943\n-1.0\n1\n-1.0\n0\n0.0\n0\n0\n243909.0\n83.0\n-1\n-1\n12066\nAustralia/Oceania\n-0.033979\n-100.000000\nNaN\n\n\n199\nSaint Helena\n2166\n-1.0\n-1\n-1.0\n2\n-1.0\n2164\n-1\n354211.0\n-1.0\n-1\n-1\n6115\nAfrica\n-0.046168\n100.000000\n-50.000000\n\n\n200\nMontserrat\n1403\n-1.0\n8\n-1.0\n1376\n-1.0\n19\n-1\n282578.0\n1611.0\n17762\n3577442\n4965\nNorth America\n-0.071276\n-12.500000\n-0.072674\n\n\n201\nNiue\n1059\n-1.0\n-1\n-1.0\n1056\n-1.0\n3\n-1\n652898.0\n-1.0\n-1\n-1\n1622\nAustralia/Oceania\n-0.094429\n100.000000\n-0.094697\n\n\n202\nTokelau\n80\n-1.0\n-1\n-1.0\n-1\n-1.0\n80\n-1\n58055.0\n-1.0\n-1\n-1\n1378\nAustralia/Oceania\n-1.250000\n100.000000\n100.000000\n\n\n\n\n202 rows × 18 columns\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n  \n    \n    \n\n  \n    \n  \n    \n    \n  \n\n    \n  \n\n\n\n\nLOOK_AT = 5\ncountry = country_df.columns[1:14]\nfig = go.Figure()\nc = 0\nfor i in country_df.index:\n  if c&lt; LOOK_AT:\n    fig.add_trace(go.Bar(name=country_df['Country'][i] , x = country , y = country_df.loc[i][1:14]))\n  else:\n    break\n  c =+1\nfig.update_layout(title= {'text': f' top {LOOK_AT} countries affected'},yaxis_type = \"log\")\nfig.show()\n\n\n\n\n                                \n                                            \n\n\n\n\n\n#Correlation b/w total cases and new cases\ncorr=np.corrcoef(df['Total Cases'],df['New Cases'])[0,1]\ncorr\n\n0.9260461093018575\n\n\n\nplt.figure(dpi=100 , figsize=(10,5))\nplt.title('Correlation Plot B/W Total Cases and New Cases')\nsns.scatterplot(x=df['Total Cases'] ,y=df['New Cases'] ,color='green')\nplt.show()\n\n\n\n\n\n\n\n\n\n#Correlation b/w total cases and active cases\ncorr=np.corrcoef(df['Total Cases'],df['Active Cases'])[0,1]\ncorr\n\n0.986657400602162\n\n\n\nplt.figure(dpi=100 , figsize=(10,5))\nplt.title('Correlation Plot B/W Total Cases and Active Cases')\nsns.scatterplot(x=df['Total Cases'] ,y=df['Active Cases'] ,color='blue')\nplt.show()\n\n\n\n\n\n\n\n\n\n#Correlation b/w total cases and new Deaths\ncorr=np.corrcoef(df['Total Cases'],df['New Deaths'])[0,1]\ncorr\n\n0.8380966179401459\n\n\n\nplt.figure(dpi=200 , figsize=(10,5))\nplt.title('Correlation Plot B/W Total Cases and New Deaths')\nsns.scatterplot(x=df['Total Cases'] ,y=df['New Deaths'],data=df ,label=f'Corr : { corr :.2f}' , hue='New Deaths', size='New Deaths'  ,)\nplt.show()\n\nTypeError: seaborn.utils._scatter_legend_artist() got multiple values for keyword argument 'label'\n\n\n\n\n\n\n\n\n\n\ncat_col = ['Continent']\nnum_col = ['Total Cases', 'Active Cases','New Cases', 'Total Deaths', 'New Deaths', 'Total Recovered', 'New Recovered']\n\n\n# plot to see distribution of all feautures across all continents\nfor f in num_col:\n    df1 = df.sort_values(by=[f],axis=0 , ignore_index=True)\n    plt.figure(dpi=100 , figsize=(20 ,9) ,facecolor='black')\n    plt.title(f'{f} Across Contients' , color='salmon' ,size=20)\n    sns.pointplot(continent_df['Continent'] , df1[f] , color='salmon')\n    plt.xticks(rotation=90 , color='salmon')\n    plt.yticks(color='salmon')\n    plt.grid(ls=':' ,color='black' ,lw=.5)\n    plt.xlabel('Contient' ,fontdict={'size':16 , 'weight':'heavy','color':'salmon'})\n    plt.ylabel(f ,fontdict={'size':16 , 'weight':'heavy','color':'salmon'})\n    plt.show()\n    print('\\n\\n\\n\\n\\n')\n\nTypeError: pointplot() takes from 0 to 1 positional arguments but 2 positional arguments (and 1 keyword-only argument) were given\n\n\n\n\n\n\n\n\n\n\navg_active_cases = df['Active Cases'].mean()\navg_deaths = df['Total Deaths'].mean()\navg_recovered = df['New Recovered'].mean()\navg_total_cases = df['Total Cases'].mean()\nprint(f'Average Total Cases Over All states : {avg_total_cases:&gt;20.2f}')\nprint(f'Average Patient Discharged Over All states : {avg_recovered:&gt;13.2f}')\nprint(f'Average Deaths Over All states : {avg_deaths:&gt;24.2f}' )\nprint(f'Average Active Cases Over All states : {avg_active_cases:&gt;17.2f}')\n\nAverage Total Cases Over All states :           6234199.04\nAverage Patient Discharged Over All states :        146.14\nAverage Deaths Over All states :                 64539.06\nAverage Active Cases Over All states :         138530.61\n\n\n\n# Function to Plot Average numerical features pre Continent\n\ndef plot_avg(x_val , y_val):\n    plt.figure(dpi=100 , figsize=(10 ,5))\n    bars = plt.bar(x_val , y_val ,)\n    for bar in bars:\n        bar.set_color(color())\n    plt.xlabel('Continent',fontdict={'size':14 , 'c':'red'})\n    plt.xticks(rotation=90)\n    plt.ylabel(num_features , fontdict={'size':14,'c':'red'})\n    plt.title(f'Average {num_features} Per Continent',fontdict={'c':'#1E4A17','size':'20'})\n    plt.show()\n# Creating Plots via Loops\nfor num_features in num_col:\n    grp_obj = df.groupby('Continent').agg({num_features : 'mean'})\n    plot_avg(grp_obj.index , grp_obj[num_features])\n    print('\\n\\n\\n\\n')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndf.describe()\n\n\n\n  \n    \n\n\n\n\n\n\nTotal Cases\nNew Cases\nTotal Deaths\nNew Deaths\nTotal Recovered\nNew Recovered\nActive Cases\nSerios/Critical\nTotal Cases/1M\nDeaths/1M\nTotal Tests\nTest/1M\nPopulation\n%Inc Cases\n%Inc Deaths\n%Inc Recovered\n\n\n\n\ncount\n2.030000e+02\n203.000000\n2.030000e+02\n203.000000\n2.030000e+02\n203.000000\n2.030000e+02\n203.000000\n203.000000\n203.000000\n2.030000e+02\n2.030000e+02\n2.030000e+02\n203.000000\n203.000000\n157.000000\n\n\nmean\n6.234199e+06\n38.054187\n6.453906e+04\n-0.418719\n5.415384e+06\n146.137931\n1.385306e+05\n184.906404\n192037.187192\n1229.238424\n2.788915e+07\n1.900798e+06\n2.984430e+07\n-0.009829\n-0.690549\n0.312495\n\n\nstd\n5.026489e+07\n307.669026\n5.030211e+05\n4.911801\n4.811890e+07\n1297.476244\n1.558723e+06\n2442.074939\n201531.986195\n1268.678728\n1.159610e+08\n3.374173e+06\n1.080898e+08\n0.088102\n16.637160\n8.945974\n\n\nmin\n8.000000e+01\n-1.000000\n-1.000000e+00\n-1.000000\n-1.000000e+00\n-1.000000\n0.000000e+00\n-1.000000\n381.000000\n-1.000000\n-1.000000e+00\n-1.000000e+00\n-1.000000e+00\n-1.250000\n-100.000000\n-50.000000\n\n\n25%\n2.750350e+04\n-1.000000\n2.120000e+02\n-1.000000\n1.490500e+03\n-1.000000\n3.000000e+00\n-1.000000\n17656.500000\n148.500000\n2.494935e+05\n1.043395e+05\n4.447320e+05\n-0.003636\n-0.437639\n-0.004329\n\n\n50%\n2.032350e+05\n-1.000000\n1.971000e+03\n-1.000000\n5.356900e+04\n-1.000000\n3.050000e+02\n0.000000\n116173.000000\n783.000000\n1.660662e+06\n7.074820e+05\n5.554960e+06\n-0.000492\n-0.044444\n-0.000535\n\n\n75%\n1.261415e+06\n-1.000000\n1.398500e+04\n-1.000000\n8.977475e+05\n0.000000\n3.865000e+03\n0.000000\n307343.500000\n2040.000000\n1.117155e+07\n2.021872e+06\n2.082730e+07\n-0.000079\n-0.006118\n-0.000072\n\n\nmax\n7.047539e+08\n3959.000000\n7.010681e+06\n57.000000\n6.756190e+08\n14953.000000\n2.212419e+07\n34791.000000\n771655.000000\n5661.000000\n1.186852e+09\n2.330212e+07\n1.406632e+09\n0.023693\n100.000000\n100.000000\n\n\n\n\n\n    \n\n  \n    \n\n  \n    \n  \n    \n\n  \n\n    \n  \n\n\n\n  \n\n\n    \n        \n    \n\n  \n\n\n\n  \n\n\n    \n  \n\n\n\n\n#checking relationship b/w data\ncor=df.corr()\nplt.figure(figsize=(20,10), facecolor='w')\nsns.heatmap(cor,xticklabels=cor.columns,yticklabels=cor.columns,annot=True)\nplt.title(\"Correlation among all the Variables of the Dataset\", size=20)\ncor\n\nValueError: could not convert string to float: 'World'\n\n\n\nplt.scatter(df.index,df['Total Tests'])\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.hist(df['%Inc Deaths'])\n\n(array([  2.,   0.,   0.,   0., 164.,  50.,   0.,   0.,   0.,   4.]),\n array([-100.,  -80.,  -60.,  -40.,  -20.,    0.,   20.,   40.,   60.,\n          80.,  100.]),\n &lt;a list of 10 Patch objects&gt;)\n\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(5,5))\ndf['%Inc Cases'].plot(kind='density')\n\n\n\n\n\n\n\n\n\nsns.boxplot(df['%Inc Recovered'])\n\n\n\n\n\n\n\n\n\nXnew= df.drop(df.index[0])\nx=Xnew\nx\nX=x['Total Cases']\nX\n\n1      87861132\n2      43270577\n3      31644703\n4      30028853\n5      27095988\n         ...   \n215        1014\n216         454\n217          35\n218          13\n219           3\nName: Total Cases, Length: 219, dtype: int64\n\n\n\ny=x['Total Tests']\ny\n\n1      1041856313\n2       856390449\n3        63776166\n4       271490188\n5       122332384\n          ...    \n215         13588\n216         20508\n217         21923\n218            -1\n219            -1\nName: Total Tests, Length: 219, dtype: int64\n\n\n\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.22, random_state=92)\nprint(X_train.shape)\nprint(X_test.shape)\nprint(y_train.shape)\nprint(y_test.shape)\n\n(170,)\n(49,)\n(170,)\n(49,)\n\n\n\nX_train1 = X_train.values.reshape(-1,1)\nprint(X_train1.shape)\ny_train1 = y_train.values.reshape(-1,1)\nprint(y_train1.shape)\nX_test1 = X_test.values.reshape(-1,1)\nprint(X_test1.shape)\ny_test1 = y_test.values.reshape(-1,1)\nprint(y_test1.shape)\n\n(170, 1)\n(170, 1)\n(49, 1)\n(49, 1)\n\n\n\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X_train1,y_train1)\n\nLinearRegression()\n\n\n\n# print the intercept\nprint(model.intercept_)\n\n[-3237767.15191424]\n\n\n\nmodel.score(X_train1,y_train1)*100\n\n65.7306106619387\n\n\n\nfrom sklearn.linear_model import LinearRegression\nlr = LinearRegression()\nlr.fit(X_train1, y_train1)\nplt.scatter(X_train1 , y_train1, color = \"red\")\nplt.plot(X_train1, lr.predict(X_train1), color = \"green\")\nplt.title(\"Total Cases vs Total Tests\")\nplt.xlabel(\"Total Tests\")\nplt.ylabel(\"Total Cases\")\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom sklearn.preprocessing import StandardScaler\nsc_X = StandardScaler()\nsc_y = StandardScaler()\nSx = sc_X.fit_transform(X_train1)\nSy = sc_y.fit_transform(y_train1)\n\n\nfrom sklearn.svm import SVR\nreg = SVR(kernel='rbf')\nreg.fit(Sx,Sy.ravel())\n\nSVR()\n\n\n\nreg.score(Sx,Sy)*100\n\n49.641192288991306\n\n\n\nplt.scatter(Sx,Sy)\nplt.plot(Sx,reg.predict(Sx),color='k',linewidth='2')\nplt.title(\"Total Cases vs Total Tests\")\nplt.xlabel(\"Total Tests\")\nplt.ylabel(\"Total Cases\")\nplt.show()\n\n\n\n\n\n\n\n\n\nimport statsmodels.api as sm\n\n\nX_opt = X_train1\nmodel_OLS = sm.OLS(endog = y_train1, exog = X_opt).fit()\nmodel_OLS.summary()\n\n\n\nOLS Regression Results\n\n\nDep. Variable:\ny\nR-squared (uncentered):\n0.679\n\n\nModel:\nOLS\nAdj. R-squared (uncentered):\n0.677\n\n\nMethod:\nLeast Squares\nF-statistic:\n357.2\n\n\nDate:\nFri, 17 Jun 2022\nProb (F-statistic):\n1.55e-43\n\n\nTime:\n05:48:28\nLog-Likelihood:\n-3262.7\n\n\nNo. Observations:\n170\nAIC:\n6527.\n\n\nDf Residuals:\n169\nBIC:\n6530.\n\n\nDf Model:\n1\n\n\n\n\nCovariance Type:\nnonrobust\n\n\n\n\n\n\n\n\n\ncoef\nstd err\nt\nP&gt;|t|\n[0.025\n0.975]\n\n\nx1\n12.2598\n0.649\n18.900\n0.000\n10.979\n13.540\n\n\n\n\n\n\nOmnibus:\n112.097\nDurbin-Watson:\n1.987\n\n\nProb(Omnibus):\n0.000\nJarque-Bera (JB):\n5471.372\n\n\nSkew:\n1.634\nProb(JB):\n0.00\n\n\nKurtosis:\n30.600\nCond. No.\n1.00\n\n\n\nWarnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\nfrom sklearn.linear_model import Ridge\nR=Ridge(alpha=0.0001)\n\n\nR.fit(X_train1,y_train1)\n\nRidge(alpha=0.0001)\n\n\n\ny2_pred=R.predict(X_test1)\n\n\nR.score(X_train1,y_train1)*100\n\n65.7306106619387\n\n\n\n#importing the model and data-fitting\nfrom sklearn.tree import DecisionTreeRegressor\nDTT=DecisionTreeRegressor(random_state=0)\nDTT.fit(X_train1,y_train1)\n\nDecisionTreeRegressor(random_state=0)\n\n\n\nX=X.values.reshape(-1,1)\ny=y.values.reshape(-1,1)\n\n\nDTT.score(X,y)*100\n\n94.18270944131648\n\n\n\nplt.scatter(X,y)\nplt.plot(X,y,color='k',linewidth='2')\nplt.title(\"Total Cases vs Total Tests\")\nplt.xlabel(\"Total Tests\")\nplt.ylabel(\"Total Cases\")\nplt.show()\n\n\n\n\n\n\n\n\n\ny_predict = DTT.predict(X_test1)\n\n\nfrom sklearn.ensemble import RandomForestRegressor\nrfr=RandomForestRegressor()\nrfr.fit(X_train1,y_train1)\n\nRandomForestRegressor()\n\n\n\ny3_pred=rfr.predict(X_test1)\n\n\nrfr.score(X,y)*100\n\n81.97028504057859\n\n\n\nplt.scatter(X,y)\nplt.plot(X,y,color='k',linewidth='2')\nplt.title(\"Total Cases vs Total Tests\")\nplt.xlabel(\"Total Tests\")\nplt.ylabel(\"Total Cases\")\nplt.show()\n\n\n\n\n\n\n\n\n\nparameters={\n    \"n_estimators\": (10,30,50,100),\n    #\"criterion\": (\"gini\",\"entropy\"),\n    #\"max_depth\": (3,4,5,7),\n    \"max_features\": (\"auto\",\"sqrt\",\"log2\"),\n    \"min_samples_split\": (2,4,6),\n    \"bootstrap\": (True, False)\n}\n\n\nfrom sklearn.model_selection import GridSearchCV\nRf_grid=GridSearchCV(RandomForestRegressor( n_jobs=-1,oob_score=False),param_grid=parameters,cv=5,verbose=True)\n\n\nRf_grid_mdl=Rf_grid.fit(X_train1,y_train1)\n\nFitting 5 folds for each of 72 candidates, totalling 360 fits\n\n\n\nRf_grid_mdl.best_estimator_\n\nRandomForestRegressor(min_samples_split=6, n_estimators=10, n_jobs=-1)\n\n\n\n#Applying the best parameters in rfr\nrfr=RandomForestRegressor(bootstrap=False, max_features='log2', n_estimators=50, min_samples_split=6, n_jobs=-1)\nrfr.fit(X_train1,y_train1)\n\nRandomForestRegressor(bootstrap=False, max_features='log2', min_samples_split=6,\n                      n_estimators=50, n_jobs=-1)\n\n\n\ny4_pred=rfr.predict(X_test1)\n\n\nrfr.score(X,y)*100\n\n86.74248561996835\n\n\n\nmodel_ev = pd.DataFrame({'Model': ['Linear Regression','Support Vector Regression',\n                                   'Random Forest Regressor','Decision Tree Regressor'], 'Accuracy': [model.score(X_train1,y_train1)*100, reg.score(Sx,Sy)*100,\n                                                                                      rfr.score(X,y)*100 ,DTT.score(X,y)*100]})\nmodel_ev\n\n\n\n  \n    \n      \n\n\n\n\n\n\nModel\nAccuracy\n\n\n\n\n0\nLinear Regression\n65.730611\n\n\n1\nSupport Vector Regression\n49.641192\n\n\n2\nRandom Forest Regressor\n86.742486\n\n\n3\nDecision Tree Regressor\n94.182709\n\n\n\n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\n\n\ncolors = ['red','green','blue','black']\nplt.figure(figsize=(15,8), facecolor='w')\nplt.title(\"Barplot Representing Accuracy of different models\")\nplt.ylabel(\"Accuracy %\")\nplt.xlabel(\"Models\")\nplt.bar(model_ev['Model'],model_ev['Accuracy'],color = colors)\nplt.show()"
  },
  {
    "objectID": "DataCo_Supply_Chain_Analytics.html",
    "href": "DataCo_Supply_Chain_Analytics.html",
    "title": "Data Cleaning and Preprocessing",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport seaborn as sb\n\n%matplotlib inline\n\n\npd.set_option('display.max_columns', None)\n\n\ntokenized_df = pd.read_csv('csv/tokenized_access_logs.csv', encoding='ISO-8859-1')\nsupply_df = pd.read_csv('csv/DataCoSupplyChainDataset.csv', encoding='ISO-8859-1')\ndesc_df = pd.read_csv('csv/DescriptionDataCoSupplyChain.csv', encoding='ISO-8859-1')\n\n\ntokenized_df.head()\n\n\n\n\n\n\n\n\n\nProduct\nCategory\nDate\nMonth\nHour\nDepartment\nip\nurl\n\n\n\n\n0\nadidas Brazuca 2017 Official Match Ball\nbaseball & softball\n9/1/2017 6:00\nSep\n6\nfitness\n37.97.182.65\n/department/fitness/category/baseball%20&%20so...\n\n\n1\nThe North Face Women's Recon Backpack\nhunting & shooting\n9/1/2017 6:00\nSep\n6\nfan shop\n206.56.112.1\n/department/fan%20shop/category/hunting%20&%20...\n\n\n2\nadidas Kids' RG III Mid Football Cleat\nfeatured shops\n9/1/2017 6:00\nSep\n6\napparel\n215.143.180.0\n/department/apparel/category/featured%20shops/...\n\n\n3\nUnder Armour Men's Compression EV SL Slide\nelectronics\n9/1/2017 6:00\nSep\n6\nfootwear\n206.56.112.1\n/department/footwear/category/electronics/prod...\n\n\n4\nPelican Sunstream 100 Kayak\nwater sports\n9/1/2017 6:01\nSep\n6\nfan shop\n136.108.56.242\n/department/fan%20shop/category/water%20sports...\n\n\n\n\n\n\n\n\n\nsupply_df.head()\n\n\n\n\n\n\n\n\n\nType\nDays for shipping (real)\nDays for shipment (scheduled)\nBenefit per order\nSales per customer\nDelivery Status\nLate_delivery_risk\nCategory Id\nCategory Name\nCustomer City\nCustomer Country\nCustomer Email\nCustomer Fname\nCustomer Id\nCustomer Lname\nCustomer Password\nCustomer Segment\nCustomer State\nCustomer Street\nCustomer Zipcode\nDepartment Id\nDepartment Name\nLatitude\nLongitude\nMarket\nOrder City\nOrder Country\nOrder Customer Id\norder date (DateOrders)\nOrder Id\nOrder Item Cardprod Id\nOrder Item Discount\nOrder Item Discount Rate\nOrder Item Id\nOrder Item Product Price\nOrder Item Profit Ratio\nOrder Item Quantity\nSales\nOrder Item Total\nOrder Profit Per Order\nOrder Region\nOrder State\nOrder Status\nOrder Zipcode\nProduct Card Id\nProduct Category Id\nProduct Description\nProduct Image\nProduct Name\nProduct Price\nProduct Status\nshipping date (DateOrders)\nShipping Mode\n\n\n\n\n0\nDEBIT\n3\n4\n91.250000\n314.640015\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\nXXXXXXXXX\nCally\n20755\nHolloway\nXXXXXXXXX\nConsumer\nPR\n5365 Noble Nectar Island\n725.0\n2\nFitness\n18.251453\n-66.037056\nPacific Asia\nBekasi\nIndonesia\n20755\n1/31/2018 22:56\n77202\n1360\n13.110000\n0.04\n180517\n327.75\n0.29\n1\n327.75\n314.640015\n91.250000\nSoutheast Asia\nJava Occidental\nCOMPLETE\nNaN\n1360\n73\nNaN\nhttp://images.acmesports.sports/Smart+watch\nSmart watch\n327.75\n0\n2/3/2018 22:56\nStandard Class\n\n\n1\nTRANSFER\n5\n4\n-249.089996\n311.359985\nLate delivery\n1\n73\nSporting Goods\nCaguas\nPuerto Rico\nXXXXXXXXX\nIrene\n19492\nLuna\nXXXXXXXXX\nConsumer\nPR\n2679 Rustic Loop\n725.0\n2\nFitness\n18.279451\n-66.037064\nPacific Asia\nBikaner\nIndia\n19492\n1/13/2018 12:27\n75939\n1360\n16.389999\n0.05\n179254\n327.75\n-0.80\n1\n327.75\n311.359985\n-249.089996\nSouth Asia\nRajastán\nPENDING\nNaN\n1360\n73\nNaN\nhttp://images.acmesports.sports/Smart+watch\nSmart watch\n327.75\n0\n1/18/2018 12:27\nStandard Class\n\n\n2\nCASH\n4\n4\n-247.779999\n309.720001\nShipping on time\n0\n73\nSporting Goods\nSan Jose\nEE. UU.\nXXXXXXXXX\nGillian\n19491\nMaldonado\nXXXXXXXXX\nConsumer\nCA\n8510 Round Bear Gate\n95125.0\n2\nFitness\n37.292233\n-121.881279\nPacific Asia\nBikaner\nIndia\n19491\n1/13/2018 12:06\n75938\n1360\n18.030001\n0.06\n179253\n327.75\n-0.80\n1\n327.75\n309.720001\n-247.779999\nSouth Asia\nRajastán\nCLOSED\nNaN\n1360\n73\nNaN\nhttp://images.acmesports.sports/Smart+watch\nSmart watch\n327.75\n0\n1/17/2018 12:06\nStandard Class\n\n\n3\nDEBIT\n3\n4\n22.860001\n304.809998\nAdvance shipping\n0\n73\nSporting Goods\nLos Angeles\nEE. UU.\nXXXXXXXXX\nTana\n19490\nTate\nXXXXXXXXX\nHome Office\nCA\n3200 Amber Bend\n90027.0\n2\nFitness\n34.125946\n-118.291016\nPacific Asia\nTownsville\nAustralia\n19490\n1/13/2018 11:45\n75937\n1360\n22.940001\n0.07\n179252\n327.75\n0.08\n1\n327.75\n304.809998\n22.860001\nOceania\nQueensland\nCOMPLETE\nNaN\n1360\n73\nNaN\nhttp://images.acmesports.sports/Smart+watch\nSmart watch\n327.75\n0\n1/16/2018 11:45\nStandard Class\n\n\n4\nPAYMENT\n2\n4\n134.210007\n298.250000\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\nXXXXXXXXX\nOrli\n19489\nHendricks\nXXXXXXXXX\nCorporate\nPR\n8671 Iron Anchor Corners\n725.0\n2\nFitness\n18.253769\n-66.037048\nPacific Asia\nTownsville\nAustralia\n19489\n1/13/2018 11:24\n75936\n1360\n29.500000\n0.09\n179251\n327.75\n0.45\n1\n327.75\n298.250000\n134.210007\nOceania\nQueensland\nPENDING_PAYMENT\nNaN\n1360\n73\nNaN\nhttp://images.acmesports.sports/Smart+watch\nSmart watch\n327.75\n0\n1/15/2018 11:24\nStandard Class\n\n\n\n\n\n\n\n\n\ndesc_df.head()\n\n\n\n\n\n\n\n\n\nFIELDS\nDESCRIPTION\n\n\n\n\n0\nType\n: Type of transaction made\n\n\n1\nDays for shipping (real)\n: Actual shipping days of the purchased product\n\n\n2\nDays for shipment (scheduled)\n: Days of scheduled delivery of the purchased...\n\n\n3\nBenefit per order\n: Earnings per order placed\n\n\n4\nSales per customer\n: Total sales per customer made per customer\n\n\n\n\n\n\n\n\n\ntokenized_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 469977 entries, 0 to 469976\nData columns (total 8 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   Product     469977 non-null  object\n 1   Category    469977 non-null  object\n 2   Date        469977 non-null  object\n 3   Month       469977 non-null  object\n 4   Hour        469977 non-null  int64 \n 5   Department  469977 non-null  object\n 6   ip          469977 non-null  object\n 7   url         469977 non-null  object\ndtypes: int64(1), object(7)\nmemory usage: 28.7+ MB\n\n\n\ntokenized_df.describe()\n\n\n\n\n\n\n\n\n\nHour\n\n\n\n\ncount\n469977.000000\n\n\nmean\n14.591827\n\n\nstd\n5.574014\n\n\nmin\n0.000000\n\n\n25%\n10.000000\n\n\n50%\n15.000000\n\n\n75%\n20.000000\n\n\nmax\n23.000000\n\n\n\n\n\n\n\n\n\nsupply_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 180519 entries, 0 to 180518\nData columns (total 53 columns):\n #   Column                         Non-Null Count   Dtype  \n---  ------                         --------------   -----  \n 0   Type                           180519 non-null  object \n 1   Days for shipping (real)       180519 non-null  int64  \n 2   Days for shipment (scheduled)  180519 non-null  int64  \n 3   Benefit per order              180519 non-null  float64\n 4   Sales per customer             180519 non-null  float64\n 5   Delivery Status                180519 non-null  object \n 6   Late_delivery_risk             180519 non-null  int64  \n 7   Category Id                    180519 non-null  int64  \n 8   Category Name                  180519 non-null  object \n 9   Customer City                  180519 non-null  object \n 10  Customer Country               180519 non-null  object \n 11  Customer Email                 180519 non-null  object \n 12  Customer Fname                 180519 non-null  object \n 13  Customer Id                    180519 non-null  int64  \n 14  Customer Lname                 180511 non-null  object \n 15  Customer Password              180519 non-null  object \n 16  Customer Segment               180519 non-null  object \n 17  Customer State                 180519 non-null  object \n 18  Customer Street                180519 non-null  object \n 19  Customer Zipcode               180516 non-null  float64\n 20  Department Id                  180519 non-null  int64  \n 21  Department Name                180519 non-null  object \n 22  Latitude                       180519 non-null  float64\n 23  Longitude                      180519 non-null  float64\n 24  Market                         180519 non-null  object \n 25  Order City                     180519 non-null  object \n 26  Order Country                  180519 non-null  object \n 27  Order Customer Id              180519 non-null  int64  \n 28  order date (DateOrders)        180519 non-null  object \n 29  Order Id                       180519 non-null  int64  \n 30  Order Item Cardprod Id         180519 non-null  int64  \n 31  Order Item Discount            180519 non-null  float64\n 32  Order Item Discount Rate       180519 non-null  float64\n 33  Order Item Id                  180519 non-null  int64  \n 34  Order Item Product Price       180519 non-null  float64\n 35  Order Item Profit Ratio        180519 non-null  float64\n 36  Order Item Quantity            180519 non-null  int64  \n 37  Sales                          180519 non-null  float64\n 38  Order Item Total               180519 non-null  float64\n 39  Order Profit Per Order         180519 non-null  float64\n 40  Order Region                   180519 non-null  object \n 41  Order State                    180519 non-null  object \n 42  Order Status                   180519 non-null  object \n 43  Order Zipcode                  24840 non-null   float64\n 44  Product Card Id                180519 non-null  int64  \n 45  Product Category Id            180519 non-null  int64  \n 46  Product Description            0 non-null       float64\n 47  Product Image                  180519 non-null  object \n 48  Product Name                   180519 non-null  object \n 49  Product Price                  180519 non-null  float64\n 50  Product Status                 180519 non-null  int64  \n 51  shipping date (DateOrders)     180519 non-null  object \n 52  Shipping Mode                  180519 non-null  object \ndtypes: float64(15), int64(14), object(24)\nmemory usage: 73.0+ MB\n\n\n\nsupply_df.describe()\n\n\n\n\n\n\n\n\n\nDays for shipping (real)\nDays for shipment (scheduled)\nBenefit per order\nSales per customer\nLate_delivery_risk\nCategory Id\nCustomer Id\nCustomer Zipcode\nDepartment Id\nLatitude\nLongitude\nOrder Customer Id\nOrder Id\nOrder Item Cardprod Id\nOrder Item Discount\nOrder Item Discount Rate\nOrder Item Id\nOrder Item Product Price\nOrder Item Profit Ratio\nOrder Item Quantity\nSales\nOrder Item Total\nOrder Profit Per Order\nOrder Zipcode\nProduct Card Id\nProduct Category Id\nProduct Description\nProduct Price\nProduct Status\n\n\n\n\ncount\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180516.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n180519.000000\n24840.000000\n180519.000000\n180519.000000\n0.0\n180519.000000\n180519.0\n\n\nmean\n3.497654\n2.931847\n21.974989\n183.107609\n0.548291\n31.851451\n6691.379495\n35921.126914\n5.443460\n29.719955\n-84.915675\n6691.379495\n36221.894903\n692.509764\n20.664741\n0.101668\n90260.000000\n141.232550\n0.120647\n2.127638\n203.772096\n183.107609\n21.974989\n55426.132327\n692.509764\n31.851451\nNaN\n141.232550\n0.0\n\n\nstd\n1.623722\n1.374449\n104.433526\n120.043670\n0.497664\n15.640064\n4162.918106\n37542.461122\n1.629246\n9.813646\n21.433241\n4162.918106\n21045.379569\n336.446807\n21.800901\n0.070415\n52111.490959\n139.732492\n0.466796\n1.453451\n132.273077\n120.043670\n104.433526\n31919.279101\n336.446807\n15.640064\nNaN\n139.732492\n0.0\n\n\nmin\n0.000000\n0.000000\n-4274.979980\n7.490000\n0.000000\n2.000000\n1.000000\n603.000000\n2.000000\n-33.937553\n-158.025986\n1.000000\n1.000000\n19.000000\n0.000000\n0.000000\n1.000000\n9.990000\n-2.750000\n1.000000\n9.990000\n7.490000\n-4274.979980\n1040.000000\n19.000000\n2.000000\nNaN\n9.990000\n0.0\n\n\n25%\n2.000000\n2.000000\n7.000000\n104.379997\n0.000000\n18.000000\n3258.500000\n725.000000\n4.000000\n18.265432\n-98.446312\n3258.500000\n18057.000000\n403.000000\n5.400000\n0.040000\n45130.500000\n50.000000\n0.080000\n1.000000\n119.980003\n104.379997\n7.000000\n23464.000000\n403.000000\n18.000000\nNaN\n50.000000\n0.0\n\n\n50%\n3.000000\n4.000000\n31.520000\n163.990005\n1.000000\n29.000000\n6457.000000\n19380.000000\n5.000000\n33.144863\n-76.847908\n6457.000000\n36140.000000\n627.000000\n14.000000\n0.100000\n90260.000000\n59.990002\n0.270000\n1.000000\n199.919998\n163.990005\n31.520000\n59405.000000\n627.000000\n29.000000\nNaN\n59.990002\n0.0\n\n\n75%\n5.000000\n4.000000\n64.800003\n247.399994\n1.000000\n45.000000\n9779.000000\n78207.000000\n7.000000\n39.279617\n-66.370583\n9779.000000\n54144.000000\n1004.000000\n29.990000\n0.160000\n135389.500000\n199.990005\n0.360000\n3.000000\n299.950012\n247.399994\n64.800003\n90008.000000\n1004.000000\n45.000000\nNaN\n199.990005\n0.0\n\n\nmax\n6.000000\n4.000000\n911.799988\n1939.989990\n1.000000\n76.000000\n20757.000000\n99205.000000\n12.000000\n48.781933\n115.263077\n20757.000000\n77204.000000\n1363.000000\n500.000000\n0.250000\n180519.000000\n1999.989990\n0.500000\n5.000000\n1999.989990\n1939.989990\n911.799988\n99301.000000\n1363.000000\n76.000000\nNaN\n1999.989990\n0.0\n\n\n\n\n\n\n\n\n\ndesc_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 52 entries, 0 to 51\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype \n---  ------       --------------  ----- \n 0   FIELDS       52 non-null     object\n 1   DESCRIPTION  52 non-null     object\ndtypes: object(2)\nmemory usage: 960.0+ bytes\n\n\n\ndesc_df.describe()\n\n\n\n\n\n\n\n\n\nFIELDS\nDESCRIPTION\n\n\n\n\ncount\n52\n52\n\n\nunique\n52\n51\n\n\ntop\nType\n: Product category code\n\n\nfreq\n1\n2\n\n\n\n\n\n\n\n\n\nsupply_df.isna().sum().to_frame().sort_values(by = [0], ascending = False).T\n\n\n\n\n\n\n\n\n\nProduct Description\nOrder Zipcode\nCustomer Lname\nCustomer Zipcode\nType\nOrder Profit Per Order\nOrder Item Cardprod Id\nOrder Item Discount\nOrder Item Discount Rate\nOrder Item Id\nOrder Item Product Price\nOrder Item Profit Ratio\nOrder Item Quantity\nSales\nOrder Item Total\nOrder Region\norder date (DateOrders)\nOrder State\nOrder Status\nProduct Card Id\nProduct Category Id\nProduct Image\nProduct Name\nProduct Price\nProduct Status\nshipping date (DateOrders)\nOrder Id\nOrder Country\nOrder Customer Id\nCustomer Fname\nDays for shipment (scheduled)\nBenefit per order\nSales per customer\nDelivery Status\nLate_delivery_risk\nCategory Id\nCategory Name\nCustomer City\nCustomer Country\nCustomer Email\nCustomer Id\nDays for shipping (real)\nCustomer Password\nCustomer Segment\nCustomer State\nCustomer Street\nDepartment Id\nDepartment Name\nLatitude\nLongitude\nMarket\nOrder City\nShipping Mode\n\n\n\n\n0\n180519\n155679\n8\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\nsupply_df.drop(columns = ['Product Description', 'Order Zipcode', 'Customer Lname', 'Customer Fname', 'Product Image', 'Customer Email', 'Customer Password', 'Customer Street'], inplace = True)\n\n\nsupply_df.head()\n\n\n\n\n\n\n\n\n\nType\nDays for shipping (real)\nDays for shipment (scheduled)\nBenefit per order\nSales per customer\nDelivery Status\nLate_delivery_risk\nCategory Id\nCategory Name\nCustomer City\nCustomer Country\nCustomer Id\nCustomer Segment\nCustomer State\nCustomer Zipcode\nDepartment Id\nDepartment Name\nLatitude\nLongitude\nMarket\nOrder City\nOrder Country\nOrder Customer Id\norder date (DateOrders)\nOrder Id\nOrder Item Cardprod Id\nOrder Item Discount\nOrder Item Discount Rate\nOrder Item Id\nOrder Item Product Price\nOrder Item Profit Ratio\nOrder Item Quantity\nSales\nOrder Item Total\nOrder Profit Per Order\nOrder Region\nOrder State\nOrder Status\nProduct Card Id\nProduct Category Id\nProduct Name\nProduct Price\nProduct Status\nshipping date (DateOrders)\nShipping Mode\n\n\n\n\n0\nDEBIT\n3\n4\n91.250000\n314.640015\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\n20755\nConsumer\nPR\n725.0\n2\nFitness\n18.251453\n-66.037056\nPacific Asia\nBekasi\nIndonesia\n20755\n1/31/2018 22:56\n77202\n1360\n13.110000\n0.04\n180517\n327.75\n0.29\n1\n327.75\n314.640015\n91.250000\nSoutheast Asia\nJava Occidental\nCOMPLETE\n1360\n73\nSmart watch\n327.75\n0\n2/3/2018 22:56\nStandard Class\n\n\n1\nTRANSFER\n5\n4\n-249.089996\n311.359985\nLate delivery\n1\n73\nSporting Goods\nCaguas\nPuerto Rico\n19492\nConsumer\nPR\n725.0\n2\nFitness\n18.279451\n-66.037064\nPacific Asia\nBikaner\nIndia\n19492\n1/13/2018 12:27\n75939\n1360\n16.389999\n0.05\n179254\n327.75\n-0.80\n1\n327.75\n311.359985\n-249.089996\nSouth Asia\nRajastán\nPENDING\n1360\n73\nSmart watch\n327.75\n0\n1/18/2018 12:27\nStandard Class\n\n\n2\nCASH\n4\n4\n-247.779999\n309.720001\nShipping on time\n0\n73\nSporting Goods\nSan Jose\nEE. UU.\n19491\nConsumer\nCA\n95125.0\n2\nFitness\n37.292233\n-121.881279\nPacific Asia\nBikaner\nIndia\n19491\n1/13/2018 12:06\n75938\n1360\n18.030001\n0.06\n179253\n327.75\n-0.80\n1\n327.75\n309.720001\n-247.779999\nSouth Asia\nRajastán\nCLOSED\n1360\n73\nSmart watch\n327.75\n0\n1/17/2018 12:06\nStandard Class\n\n\n3\nDEBIT\n3\n4\n22.860001\n304.809998\nAdvance shipping\n0\n73\nSporting Goods\nLos Angeles\nEE. UU.\n19490\nHome Office\nCA\n90027.0\n2\nFitness\n34.125946\n-118.291016\nPacific Asia\nTownsville\nAustralia\n19490\n1/13/2018 11:45\n75937\n1360\n22.940001\n0.07\n179252\n327.75\n0.08\n1\n327.75\n304.809998\n22.860001\nOceania\nQueensland\nCOMPLETE\n1360\n73\nSmart watch\n327.75\n0\n1/16/2018 11:45\nStandard Class\n\n\n4\nPAYMENT\n2\n4\n134.210007\n298.250000\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\n19489\nCorporate\nPR\n725.0\n2\nFitness\n18.253769\n-66.037048\nPacific Asia\nTownsville\nAustralia\n19489\n1/13/2018 11:24\n75936\n1360\n29.500000\n0.09\n179251\n327.75\n0.45\n1\n327.75\n298.250000\n134.210007\nOceania\nQueensland\nPENDING_PAYMENT\n1360\n73\nSmart watch\n327.75\n0\n1/15/2018 11:24\nStandard Class\n\n\n\n\n\n\n\n\n\nsupply_df.dropna(inplace = True)\n\n\nsupply_df['order date (DateOrders)'] = pd.to_datetime(supply_df['order date (DateOrders)'])\nsupply_df['shipping date (DateOrders)'] = pd.to_datetime(supply_df['shipping date (DateOrders)'])\nsupply_df.head()\n\n\n\n\n\n\n\n\n\nType\nDays for shipping (real)\nDays for shipment (scheduled)\nBenefit per order\nSales per customer\nDelivery Status\nLate_delivery_risk\nCategory Id\nCategory Name\nCustomer City\nCustomer Country\nCustomer Id\nCustomer Segment\nCustomer State\nCustomer Zipcode\nDepartment Id\nDepartment Name\nLatitude\nLongitude\nMarket\nOrder City\nOrder Country\nOrder Customer Id\norder date (DateOrders)\nOrder Id\nOrder Item Cardprod Id\nOrder Item Discount\nOrder Item Discount Rate\nOrder Item Id\nOrder Item Product Price\nOrder Item Profit Ratio\nOrder Item Quantity\nSales\nOrder Item Total\nOrder Profit Per Order\nOrder Region\nOrder State\nOrder Status\nProduct Card Id\nProduct Category Id\nProduct Name\nProduct Price\nProduct Status\nshipping date (DateOrders)\nShipping Mode\n\n\n\n\n0\nDEBIT\n3\n4\n91.250000\n314.640015\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\n20755\nConsumer\nPR\n725.0\n2\nFitness\n18.251453\n-66.037056\nPacific Asia\nBekasi\nIndonesia\n20755\n2018-01-31 22:56:00\n77202\n1360\n13.110000\n0.04\n180517\n327.75\n0.29\n1\n327.75\n314.640015\n91.250000\nSoutheast Asia\nJava Occidental\nCOMPLETE\n1360\n73\nSmart watch\n327.75\n0\n2018-02-03 22:56:00\nStandard Class\n\n\n1\nTRANSFER\n5\n4\n-249.089996\n311.359985\nLate delivery\n1\n73\nSporting Goods\nCaguas\nPuerto Rico\n19492\nConsumer\nPR\n725.0\n2\nFitness\n18.279451\n-66.037064\nPacific Asia\nBikaner\nIndia\n19492\n2018-01-13 12:27:00\n75939\n1360\n16.389999\n0.05\n179254\n327.75\n-0.80\n1\n327.75\n311.359985\n-249.089996\nSouth Asia\nRajastán\nPENDING\n1360\n73\nSmart watch\n327.75\n0\n2018-01-18 12:27:00\nStandard Class\n\n\n2\nCASH\n4\n4\n-247.779999\n309.720001\nShipping on time\n0\n73\nSporting Goods\nSan Jose\nEE. UU.\n19491\nConsumer\nCA\n95125.0\n2\nFitness\n37.292233\n-121.881279\nPacific Asia\nBikaner\nIndia\n19491\n2018-01-13 12:06:00\n75938\n1360\n18.030001\n0.06\n179253\n327.75\n-0.80\n1\n327.75\n309.720001\n-247.779999\nSouth Asia\nRajastán\nCLOSED\n1360\n73\nSmart watch\n327.75\n0\n2018-01-17 12:06:00\nStandard Class\n\n\n3\nDEBIT\n3\n4\n22.860001\n304.809998\nAdvance shipping\n0\n73\nSporting Goods\nLos Angeles\nEE. UU.\n19490\nHome Office\nCA\n90027.0\n2\nFitness\n34.125946\n-118.291016\nPacific Asia\nTownsville\nAustralia\n19490\n2018-01-13 11:45:00\n75937\n1360\n22.940001\n0.07\n179252\n327.75\n0.08\n1\n327.75\n304.809998\n22.860001\nOceania\nQueensland\nCOMPLETE\n1360\n73\nSmart watch\n327.75\n0\n2018-01-16 11:45:00\nStandard Class\n\n\n4\nPAYMENT\n2\n4\n134.210007\n298.250000\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\n19489\nCorporate\nPR\n725.0\n2\nFitness\n18.253769\n-66.037048\nPacific Asia\nTownsville\nAustralia\n19489\n2018-01-13 11:24:00\n75936\n1360\n29.500000\n0.09\n179251\n327.75\n0.45\n1\n327.75\n298.250000\n134.210007\nOceania\nQueensland\nPENDING_PAYMENT\n1360\n73\nSmart watch\n327.75\n0\n2018-01-15 11:24:00\nStandard Class\n\n\n\n\n\n\n\n\n\ntokenized_df['Date'] = pd.to_datetime(tokenized_df['Date'])\ntokenized_df.head()\n\n\n\n\n\n\n\n\n\nProduct\nCategory\nDate\nMonth\nHour\nDepartment\nip\nurl\n\n\n\n\n0\nadidas Brazuca 2017 Official Match Ball\nbaseball & softball\n2017-09-01 06:00:00\nSep\n6\nfitness\n37.97.182.65\n/department/fitness/category/baseball%20&%20so...\n\n\n1\nThe North Face Women's Recon Backpack\nhunting & shooting\n2017-09-01 06:00:00\nSep\n6\nfan shop\n206.56.112.1\n/department/fan%20shop/category/hunting%20&%20...\n\n\n2\nadidas Kids' RG III Mid Football Cleat\nfeatured shops\n2017-09-01 06:00:00\nSep\n6\napparel\n215.143.180.0\n/department/apparel/category/featured%20shops/...\n\n\n3\nUnder Armour Men's Compression EV SL Slide\nelectronics\n2017-09-01 06:00:00\nSep\n6\nfootwear\n206.56.112.1\n/department/footwear/category/electronics/prod...\n\n\n4\nPelican Sunstream 100 Kayak\nwater sports\n2017-09-01 06:01:00\nSep\n6\nfan shop\n136.108.56.242\n/department/fan%20shop/category/water%20sports...\n\n\n\n\n\n\n\n\n\ntokenized_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 469977 entries, 0 to 469976\nData columns (total 8 columns):\n #   Column      Non-Null Count   Dtype         \n---  ------      --------------   -----         \n 0   Product     469977 non-null  object        \n 1   Category    469977 non-null  object        \n 2   Date        469977 non-null  datetime64[ns]\n 3   Month       469977 non-null  object        \n 4   Hour        469977 non-null  int64         \n 5   Department  469977 non-null  object        \n 6   ip          469977 non-null  object        \n 7   url         469977 non-null  object        \ndtypes: datetime64[ns](1), int64(1), object(6)\nmemory usage: 28.7+ MB\n\n\n\ndef cross_tab(dataframe, col, columns_list):\n    new = []\n    for c in columns_list:\n        new.append(pd.crosstab(dataframe[col], dataframe[c], margins = True, margins_name = 'Total'))\n    new_df = pd.concat(new, axis = 1, keys = columns_list)\n    return new_df\n\n\ncross_tab(supply_df, 'Category Name', ['Late_delivery_risk', 'Delivery Status', 'Customer Segment', 'Shipping Mode', 'Department Name'])\n\n\n\n\n\n\n\n\n\nLate_delivery_risk\nDelivery Status\nCustomer Segment\nShipping Mode\nDepartment Name\n\n\n\n0\n1\nTotal\nAdvance shipping\nLate delivery\nShipping canceled\nShipping on time\nTotal\nConsumer\nCorporate\nHome Office\nTotal\nFirst Class\nSame Day\nSecond Class\nStandard Class\nTotal\nApparel\nBook Shop\nDiscs Shop\nFan Shop\nFitness\nFootwear\nGolf\nHealth and Beauty\nOutdoors\nPet Shop\nTechnology\nTotal\n\n\nCategory Name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAccessories\n766\n1014\n1780\n406\n1014\n83\n277\n1780\n901\n537\n342\n1780\n290\n88\n360\n1042\n1780\n0\n0\n0\n0\n0\n0\n0\n0\n1780\n0\n0\n1780\n\n\nAs Seen on TV!\n29\n39\n68\n15\n39\n2\n12\n68\n31\n22\n15\n68\n10\n3\n14\n41\n68\n0\n0\n0\n0\n0\n68\n0\n0\n0\n0\n0\n68\n\n\nBaby\n98\n109\n207\n49\n109\n9\n40\n207\n107\n72\n28\n207\n34\n27\n29\n117\n207\n207\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n207\n\n\nBaseball & Softball\n283\n349\n632\n141\n349\n25\n117\n632\n337\n188\n107\n632\n105\n30\n133\n364\n632\n0\n0\n0\n0\n632\n0\n0\n0\n0\n0\n0\n632\n\n\nBasketball\n30\n37\n67\n22\n37\n3\n5\n67\n32\n19\n16\n67\n16\n0\n10\n41\n67\n0\n0\n0\n0\n67\n0\n0\n0\n0\n0\n0\n67\n\n\nBooks\n176\n229\n405\n87\n229\n14\n75\n405\n179\n129\n97\n405\n53\n44\n64\n244\n405\n0\n405\n0\n0\n0\n0\n0\n0\n0\n0\n0\n405\n\n\nBoxing & MMA\n185\n238\n423\n84\n238\n21\n80\n423\n219\n125\n79\n423\n67\n29\n95\n232\n423\n0\n0\n0\n0\n0\n423\n0\n0\n0\n0\n0\n423\n\n\nCDs\n130\n141\n271\n67\n141\n8\n55\n271\n150\n83\n38\n271\n45\n18\n33\n175\n271\n0\n0\n271\n0\n0\n0\n0\n0\n0\n0\n0\n271\n\n\nCameras\n248\n344\n592\n126\n344\n30\n92\n592\n321\n158\n113\n592\n152\n22\n115\n303\n592\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n592\n592\n\n\nCamping & Hiking\n6242\n7487\n13729\n3147\n7487\n572\n2523\n13729\n7043\n4213\n2473\n13729\n2057\n738\n2668\n8266\n13729\n0\n0\n0\n13729\n0\n0\n0\n0\n0\n0\n0\n13729\n\n\nCardio Equipment\n5682\n6805\n12487\n2921\n6805\n539\n2222\n12487\n6513\n3786\n2188\n12487\n1923\n661\n2406\n7497\n12487\n0\n0\n0\n0\n0\n12487\n0\n0\n0\n0\n0\n12487\n\n\nChildren's Clothing\n303\n348\n651\n157\n348\n30\n116\n651\n332\n211\n108\n651\n78\n27\n146\n400\n651\n651\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n651\n\n\nCleats\n11055\n13496\n24551\n5570\n13496\n1037\n4448\n24551\n12700\n7347\n4504\n24551\n3745\n1353\n4816\n14637\n24551\n24551\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24551\n\n\nComputers\n218\n224\n442\n117\n224\n17\n84\n442\n233\n137\n72\n442\n55\n16\n71\n300\n442\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n442\n442\n\n\nConsumer Electronics\n193\n237\n430\n101\n237\n22\n70\n430\n227\n135\n68\n430\n61\n33\n101\n235\n430\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n430\n430\n\n\nCrafts\n213\n271\n484\n104\n271\n26\n83\n484\n276\n140\n68\n484\n85\n14\n100\n285\n484\n484\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n484\n\n\nDVDs\n224\n259\n483\n115\n259\n24\n85\n483\n261\n154\n68\n483\n62\n16\n89\n316\n483\n0\n0\n483\n0\n0\n0\n0\n0\n0\n0\n0\n483\n\n\nElectronics\n1386\n1770\n3156\n733\n1770\n132\n521\n3156\n1686\n929\n541\n3156\n499\n176\n599\n1882\n3156\n0\n0\n0\n0\n0\n1127\n0\n0\n2029\n0\n0\n3156\n\n\nFishing\n7809\n9516\n17325\n4034\n9516\n730\n3045\n17325\n9023\n5237\n3065\n17325\n2715\n868\n3314\n10428\n17325\n0\n0\n0\n17325\n0\n0\n0\n0\n0\n0\n0\n17325\n\n\nFitness Accessories\n133\n176\n309\n69\n176\n13\n51\n309\n151\n90\n68\n309\n50\n13\n60\n186\n309\n0\n0\n0\n0\n0\n309\n0\n0\n0\n0\n0\n309\n\n\nGarden\n214\n270\n484\n116\n270\n18\n80\n484\n261\n160\n63\n484\n73\n29\n87\n295\n484\n0\n0\n0\n0\n0\n0\n0\n0\n484\n0\n0\n484\n\n\nGirls' Apparel\n537\n664\n1201\n284\n664\n64\n189\n1201\n604\n384\n213\n1201\n200\n59\n229\n713\n1201\n0\n0\n0\n0\n0\n0\n1201\n0\n0\n0\n0\n1201\n\n\nGolf Apparel\n212\n229\n441\n116\n229\n12\n84\n441\n233\n133\n75\n441\n58\n22\n77\n284\n441\n0\n0\n0\n0\n0\n0\n0\n0\n441\n0\n0\n441\n\n\nGolf Bags & Carts\n19\n42\n61\n12\n42\n0\n7\n61\n32\n16\n13\n61\n19\n1\n13\n28\n61\n0\n0\n0\n0\n0\n0\n0\n0\n61\n0\n0\n61\n\n\nGolf Balls\n670\n805\n1475\n357\n805\n72\n241\n1475\n786\n417\n272\n1475\n209\n88\n277\n901\n1475\n0\n0\n0\n0\n0\n0\n0\n0\n1475\n0\n0\n1475\n\n\nGolf Gloves\n468\n602\n1070\n240\n602\n41\n187\n1070\n540\n338\n192\n1070\n160\n59\n211\n640\n1070\n0\n0\n0\n0\n0\n0\n0\n0\n1070\n0\n0\n1070\n\n\nGolf Shoes\n233\n291\n524\n120\n291\n22\n91\n524\n275\n160\n89\n524\n78\n33\n108\n305\n524\n0\n0\n0\n0\n0\n0\n0\n0\n524\n0\n0\n524\n\n\nHealth and Beauty\n160\n202\n362\n83\n202\n16\n61\n362\n190\n117\n55\n362\n67\n14\n66\n215\n362\n0\n0\n0\n0\n0\n0\n0\n362\n0\n0\n0\n362\n\n\nHockey\n285\n329\n614\n158\n329\n26\n101\n614\n327\n185\n102\n614\n98\n41\n93\n382\n614\n0\n0\n0\n0\n614\n0\n0\n0\n0\n0\n0\n614\n\n\nHunting & Shooting\n193\n247\n440\n101\n247\n16\n76\n440\n234\n129\n77\n440\n57\n38\n88\n257\n440\n0\n0\n0\n440\n0\n0\n0\n0\n0\n0\n0\n440\n\n\nIndoor/Outdoor Games\n8733\n10565\n19298\n4451\n10565\n828\n3454\n19298\n9959\n5974\n3365\n19298\n2927\n1087\n3750\n11534\n19298\n0\n0\n0\n19298\n0\n0\n0\n0\n0\n0\n0\n19298\n\n\nKids' Golf Clubs\n179\n205\n384\n84\n205\n28\n67\n384\n198\n114\n72\n384\n53\n21\n68\n242\n384\n0\n0\n0\n0\n0\n0\n0\n0\n384\n0\n0\n384\n\n\nLacrosse\n137\n206\n343\n75\n206\n14\n48\n343\n182\n98\n63\n343\n51\n16\n70\n206\n343\n0\n0\n0\n0\n343\n0\n0\n0\n0\n0\n0\n343\n\n\nMen's Clothing\n95\n113\n208\n51\n113\n10\n34\n208\n111\n66\n31\n208\n37\n13\n32\n126\n208\n208\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n208\n\n\nMen's Footwear\n10125\n12121\n22246\n5104\n12121\n983\n4038\n22246\n11472\n6817\n3957\n22246\n3366\n1182\n4410\n13288\n22246\n22246\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n22246\n\n\nMen's Golf Clubs\n148\n135\n283\n83\n135\n9\n56\n283\n138\n89\n56\n283\n35\n11\n50\n187\n283\n0\n0\n0\n0\n0\n0\n0\n0\n283\n0\n0\n283\n\n\nMusic\n186\n248\n434\n97\n248\n17\n72\n434\n183\n127\n124\n434\n73\n22\n83\n256\n434\n0\n0\n434\n0\n0\n0\n0\n0\n0\n0\n0\n434\n\n\nPet Supplies\n202\n290\n492\n91\n290\n20\n91\n492\n241\n161\n90\n492\n84\n40\n119\n249\n492\n0\n0\n0\n0\n0\n0\n0\n0\n0\n492\n0\n492\n\n\nShop By Sport\n4926\n6058\n10984\n2536\n6058\n469\n1921\n10984\n5766\n3267\n1951\n10984\n1725\n598\n2157\n6504\n10984\n0\n0\n0\n0\n0\n0\n10984\n0\n0\n0\n0\n10984\n\n\nSoccer\n63\n75\n138\n28\n75\n2\n33\n138\n75\n37\n26\n138\n15\n8\n31\n84\n138\n0\n0\n0\n0\n138\n0\n0\n0\n0\n0\n0\n138\n\n\nSporting Goods\n159\n198\n357\n83\n198\n21\n55\n357\n164\n136\n57\n357\n59\n21\n71\n206\n357\n0\n0\n0\n0\n357\n0\n0\n0\n0\n0\n0\n357\n\n\nStrength Training\n47\n64\n111\n22\n64\n2\n23\n111\n58\n23\n30\n111\n14\n4\n22\n71\n111\n0\n0\n0\n0\n0\n111\n0\n0\n0\n0\n0\n111\n\n\nTennis & Racquet\n145\n183\n328\n65\n183\n14\n66\n328\n165\n112\n51\n328\n53\n16\n70\n189\n328\n0\n0\n0\n0\n328\n0\n0\n0\n0\n0\n0\n328\n\n\nToys\n238\n291\n529\n123\n291\n22\n93\n529\n265\n143\n121\n529\n85\n24\n98\n322\n529\n0\n0\n0\n529\n0\n0\n0\n0\n0\n0\n0\n529\n\n\nTrade-In\n432\n542\n974\n232\n542\n48\n152\n974\n468\n327\n179\n974\n146\n42\n214\n572\n974\n0\n0\n0\n0\n0\n0\n0\n0\n974\n0\n0\n974\n\n\nVideo Games\n382\n455\n837\n190\n455\n34\n158\n837\n455\n206\n176\n837\n96\n47\n175\n519\n837\n0\n0\n837\n0\n0\n0\n0\n0\n0\n0\n0\n837\n\n\nWater Sports\n7023\n8517\n15540\n3547\n8517\n660\n2816\n15540\n8111\n4677\n2752\n15540\n2408\n860\n3095\n9177\n15540\n0\n0\n0\n15540\n0\n0\n0\n0\n0\n0\n0\n15540\n\n\nWomen's Apparel\n9559\n11476\n21035\n4886\n11476\n919\n3754\n21035\n10864\n6418\n3753\n21035\n3351\n1120\n4038\n12526\n21035\n0\n0\n0\n0\n0\n0\n21035\n0\n0\n0\n0\n21035\n\n\nWomen's Clothing\n283\n367\n650\n145\n367\n19\n119\n650\n328\n194\n128\n650\n88\n39\n152\n371\n650\n650\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n650\n\n\nWomen's Golf Clubs\n84\n97\n181\n47\n97\n11\n26\n181\n95\n51\n35\n181\n26\n6\n39\n110\n181\n0\n0\n0\n0\n0\n0\n0\n0\n181\n0\n0\n181\n\n\nTotal\n81540\n98976\n180516\n41592\n98976\n7754\n32194\n180516\n93502\n54788\n32226\n180516\n27813\n9737\n35216\n107750\n180516\n48997\n405\n2025\n66861\n2479\n14525\n33220\n362\n9686\n492\n1464\n180516\n\n\n\n\n\n\n\n\n\npd.crosstab(supply_df['Category Name'], supply_df['Order Country'])\n\n\n\n\n\n\n\n\nOrder Country\nAfganistán\nAlbania\nAlemania\nAngola\nArabia Saudí\nArgelia\nArgentina\nArmenia\nAustralia\nAustria\nAzerbaiyán\nBangladés\nBarbados\nBaréin\nBelice\nBenín\nBielorrusia\nBolivia\nBosnia y Herzegovina\nBotsuana\nBrasil\nBulgaria\nBurkina Faso\nBurundi\nBután\nBélgica\nCamboya\nCamerún\nCanada\nChad\nChile\nChina\nChipre\nColombia\nCorea del Sur\nCosta Rica\nCosta de Marfil\nCroacia\nCuba\nDinamarca\nEcuador\nEgipto\nEl Salvador\nEmiratos Árabes Unidos\nEritrea\nEslovaquia\nEslovenia\nEspaña\nEstados Unidos\nEstonia\nEtiopía\nFilipinas\nFinlandia\nFrancia\nGabón\nGeorgia\nGhana\nGrecia\nGuadalupe\nGuatemala\nGuayana Francesa\nGuinea\nGuinea Ecuatorial\nGuinea-Bissau\nGuyana\nHaití\nHonduras\nHong Kong\nHungría\nIndia\nIndonesia\nIrak\nIrlanda\nIrán\nIsrael\nItalia\nJamaica\nJapón\nJordania\nKazajistán\nKenia\nKirguistán\nKuwait\nLaos\nLesoto\nLiberia\nLibia\nLituania\nLuxemburgo\nLíbano\nMacedonia\nMadagascar\nMalasia\nMali\nMarruecos\nMartinica\nMauritania\nMoldavia\nMongolia\nMontenegro\nMozambique\nMyanmar (Birmania)\nMéxico\nNamibia\nNepal\nNicaragua\nNigeria\nNoruega\nNueva Zelanda\nNíger\nOmán\nPakistán\nPanamá\nPapúa Nueva Guinea\nParaguay\nPaíses Bajos\nPerú\nPolonia\nPortugal\nQatar\nReino Unido\nRepública Centroafricana\nRepública Checa\nRepública Democrática del Congo\nRepública Dominicana\nRepública de Gambia\nRepública del Congo\nRuanda\nRumania\nRusia\nSenegal\nSerbia\nSierra Leona\nSingapur\nSiria\nSomalia\nSri Lanka\nSuazilandia\nSudAfrica\nSudán\nSudán del Sur\nSuecia\nSuiza\nSurinam\nSáhara Occidental\nTailandia\nTaiwán\nTanzania\nTayikistán\nTogo\nTrinidad y Tobago\nTurkmenistán\nTurquía\nTúnez\nUcrania\nUganda\nUruguay\nUzbekistán\nVenezuela\nVietnam\nYemen\nYibuti\nZambia\nZimbabue\n\n\nCategory Name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAccessories\n1\n0\n67\n1\n11\n7\n15\n0\n80\n13\n3\n1\n0\n0\n1\n1\n3\n0\n2\n0\n82\n2\n0\n0\n0\n5\n3\n4\n14\n1\n15\n49\n0\n17\n4\n1\n5\n1\n33\n1\n1\n14\n41\n0\n0\n0\n0\n24\n306\n0\n0\n37\n1\n86\n0\n0\n5\n1\n0\n30\n1\n1\n0\n0\n0\n5\n37\n0\n4\n54\n42\n18\n3\n17\n4\n40\n3\n9\n3\n8\n1\n0\n0\n0\n1\n1\n4\n3\n1\n0\n0\n2\n2\n1\n15\n1\n0\n2\n1\n0\n3\n6\n132\n0\n0\n27\n21\n1\n24\n3\n0\n9\n11\n0\n1\n13\n9\n9\n2\n0\n47\n0\n4\n14\n33\n0\n1\n1\n5\n9\n6\n0\n0\n3\n0\n1\n0\n0\n15\n0\n0\n2\n1\n0\n0\n5\n0\n7\n0\n0\n0\n0\n42\n1\n13\n1\n0\n2\n9\n9\n1\n0\n2\n2\n\n\nAs Seen on TV!\n0\n0\n11\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n2\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n1\n0\n0\n0\n0\n0\n\n\nBaby\n0\n0\n20\n0\n0\n0\n0\n0\n34\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n33\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n1\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n27\n0\n2\n0\n0\n16\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n1\n0\n0\n0\n0\n17\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n\n\nBaseball & Softball\n0\n0\n29\n1\n1\n3\n9\n0\n30\n4\n0\n1\n1\n0\n0\n2\n0\n1\n0\n1\n35\n1\n0\n0\n0\n2\n0\n3\n1\n0\n3\n21\n0\n6\n0\n0\n0\n0\n18\n1\n1\n5\n11\n0\n0\n0\n0\n12\n101\n0\n0\n4\n0\n33\n1\n0\n1\n0\n0\n14\n1\n0\n0\n0\n0\n2\n19\n0\n1\n17\n14\n6\n1\n4\n1\n15\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n3\n0\n6\n0\n0\n0\n0\n0\n1\n0\n49\n0\n0\n9\n4\n1\n8\n0\n1\n1\n7\n0\n0\n6\n2\n1\n3\n0\n18\n0\n2\n3\n12\n0\n1\n0\n1\n5\n4\n0\n1\n1\n0\n1\n0\n0\n6\n1\n0\n2\n2\n0\n0\n3\n0\n2\n0\n0\n0\n0\n9\n0\n5\n2\n0\n0\n3\n3\n0\n0\n0\n0\n\n\nBasketball\n0\n0\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n25\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nBooks\n0\n0\n59\n0\n0\n0\n0\n0\n28\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n19\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n0\n15\n1\n125\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n12\n0\n6\n0\n0\n26\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n3\n0\n0\n0\n15\n0\n0\n0\n0\n29\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n10\n2\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nBoxing & MMA\n1\n0\n23\n2\n2\n0\n7\n0\n9\n5\n0\n1\n0\n0\n0\n0\n2\n1\n0\n0\n24\n0\n0\n0\n0\n0\n1\n1\n4\n0\n0\n16\n0\n5\n0\n0\n1\n0\n8\n2\n0\n3\n11\n0\n0\n0\n0\n12\n50\n0\n0\n7\n0\n32\n0\n2\n1\n0\n0\n6\n0\n1\n0\n0\n0\n1\n10\n0\n0\n10\n7\n5\n3\n1\n1\n18\n0\n1\n1\n1\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n5\n0\n0\n1\n0\n0\n1\n0\n34\n0\n0\n5\n4\n1\n2\n0\n0\n0\n1\n0\n0\n8\n1\n1\n1\n0\n21\n1\n2\n2\n10\n0\n0\n0\n3\n1\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n1\n0\n0\n0\n0\n0\n2\n0\n1\n0\n1\n3\n0\n1\n0\n0\n0\n3\n0\n0\n0\n1\n0\n\n\nCDs\n0\n0\n25\n0\n0\n0\n0\n0\n48\n2\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n33\n0\n0\n1\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n16\n0\n0\n0\n11\n0\n27\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n21\n10\n0\n0\n0\n0\n18\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n7\n0\n0\n0\n0\n26\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n\n\nCameras\n0\n0\n91\n0\n0\n0\n0\n0\n2\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n35\n0\n0\n0\n0\n0\n173\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n2\n0\n6\n0\n0\n77\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n0\n0\n29\n0\n0\n3\n0\n109\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n14\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nCamping & Hiking\n12\n3\n742\n23\n68\n42\n153\n0\n558\n75\n10\n21\n14\n0\n0\n7\n21\n14\n6\n1\n673\n14\n0\n0\n1\n41\n7\n18\n81\n0\n68\n351\n2\n141\n33\n4\n14\n6\n295\n26\n17\n82\n310\n2\n0\n1\n1\n304\n1973\n2\n2\n147\n26\n962\n3\n7\n19\n2\n2\n212\n0\n1\n0\n2\n0\n35\n315\n7\n19\n324\n255\n72\n41\n121\n23\n360\n13\n44\n8\n23\n21\n7\n0\n0\n1\n4\n8\n14\n0\n1\n0\n10\n42\n7\n76\n9\n1\n3\n5\n1\n21\n32\n1088\n1\n6\n248\n183\n36\n139\n9\n0\n54\n146\n2\n8\n145\n60\n53\n20\n1\n566\n4\n12\n78\n280\n1\n1\n7\n51\n68\n28\n0\n2\n28\n5\n10\n0\n1\n87\n22\n1\n79\n15\n0\n0\n57\n3\n26\n0\n12\n13\n4\n265\n3\n76\n7\n5\n5\n77\n44\n4\n4\n22\n12\n\n\nCardio Equipment\n12\n2\n705\n13\n57\n40\n139\n1\n555\n91\n4\n29\n8\n0\n0\n2\n9\n14\n5\n1\n570\n18\n0\n0\n0\n45\n12\n22\n76\n0\n56\n349\n0\n121\n30\n2\n20\n7\n286\n20\n24\n100\n263\n0\n0\n1\n0\n257\n1724\n1\n1\n108\n21\n889\n3\n6\n18\n1\n2\n192\n1\n3\n0\n3\n3\n37\n277\n3\n13\n266\n234\n85\n28\n106\n26\n332\n13\n47\n2\n20\n16\n4\n0\n0\n3\n6\n7\n6\n1\n0\n0\n15\n31\n8\n73\n10\n4\n5\n4\n1\n21\n18\n922\n1\n5\n236\n165\n21\n107\n4\n0\n51\n148\n2\n4\n158\n62\n53\n24\n5\n532\n1\n10\n75\n268\n1\n1\n6\n43\n63\n20\n0\n2\n30\n4\n15\n1\n0\n85\n14\n0\n63\n15\n1\n1\n47\n1\n25\n0\n8\n11\n3\n235\n2\n71\n5\n8\n11\n81\n50\n2\n5\n17\n22\n\n\nChildren's Clothing\n0\n0\n103\n0\n0\n0\n0\n0\n20\n22\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n18\n0\n0\n4\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n45\n0\n0\n0\n23\n2\n157\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n18\n28\n0\n2\n0\n0\n56\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n0\n0\n22\n0\n0\n4\n0\n72\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n13\n1\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n\n\nCleats\n16\n3\n1281\n40\n122\n74\n267\n2\n976\n197\n13\n79\n11\n0\n3\n9\n25\n27\n6\n1\n1088\n31\n1\n1\n0\n82\n12\n46\n145\n0\n83\n635\n2\n238\n55\n4\n35\n11\n505\n35\n43\n187\n539\n5\n1\n0\n0\n501\n3578\n4\n6\n236\n37\n1824\n9\n16\n31\n4\n6\n385\n1\n6\n0\n4\n1\n75\n501\n13\n25\n537\n507\n140\n67\n213\n45\n675\n32\n91\n17\n42\n33\n12\n0\n1\n2\n1\n13\n21\n1\n1\n0\n20\n71\n14\n166\n19\n0\n14\n16\n2\n38\n45\n1854\n4\n10\n446\n319\n51\n256\n19\n1\n88\n303\n4\n10\n261\n119\n80\n47\n6\n965\n1\n28\n144\n528\n0\n1\n16\n59\n152\n42\n0\n9\n51\n12\n22\n2\n0\n145\n39\n0\n118\n44\n1\n0\n111\n3\n62\n1\n18\n23\n8\n470\n3\n152\n12\n21\n18\n147\n105\n17\n2\n38\n28\n\n\nComputers\n5\n0\n72\n0\n0\n0\n0\n0\n11\n6\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n23\n0\n0\n4\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n36\n0\n0\n0\n1\n2\n94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n12\n0\n9\n0\n0\n33\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n19\n0\n0\n4\n0\n56\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n6\n1\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n\n\nConsumer Electronics\n0\n0\n65\n0\n0\n0\n0\n0\n38\n6\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n1\n0\n0\n0\n0\n16\n0\n0\n3\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n34\n0\n0\n0\n6\n0\n61\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n29\n29\n0\n5\n0\n0\n38\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n14\n0\n0\n2\n0\n44\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\nCrafts\n0\n0\n45\n0\n0\n0\n0\n0\n54\n2\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n53\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24\n0\n0\n0\n23\n2\n71\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n43\n26\n0\n4\n0\n0\n21\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n2\n0\n0\n0\n11\n0\n0\n0\n2\n0\n0\n0\n0\n42\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n11\n4\n0\n0\n8\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n\n\nDVDs\n0\n0\n36\n0\n0\n0\n0\n0\n87\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n3\n0\n0\n0\n0\n45\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n21\n0\n0\n0\n16\n6\n54\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n33\n30\n0\n12\n0\n0\n18\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n0\n1\n0\n14\n0\n0\n0\n0\n40\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n\n\nElectronics\n1\n0\n109\n8\n18\n17\n34\n0\n173\n21\n2\n9\n3\n0\n0\n2\n2\n8\n0\n0\n115\n6\n1\n0\n0\n12\n4\n2\n22\n0\n14\n103\n0\n43\n8\n0\n8\n2\n57\n4\n4\n27\n72\n1\n0\n0\n1\n42\n531\n2\n0\n38\n4\n155\n0\n4\n5\n0\n0\n53\n0\n1\n0\n0\n0\n10\n44\n1\n6\n95\n85\n17\n8\n38\n3\n54\n6\n8\n0\n5\n5\n1\n1\n0\n0\n2\n0\n0\n0\n0\n0\n3\n12\n3\n31\n2\n1\n2\n1\n0\n2\n9\n234\n0\n0\n57\n45\n8\n25\n1\n0\n14\n34\n2\n2\n23\n18\n16\n3\n2\n79\n0\n5\n23\n67\n0\n0\n0\n9\n30\n3\n0\n0\n8\n0\n6\n0\n0\n26\n3\n0\n11\n3\n0\n0\n27\n0\n12\n1\n0\n4\n2\n69\n1\n22\n2\n4\n3\n16\n23\n1\n0\n8\n1\n\n\nFishing\n16\n7\n911\n31\n82\n55\n183\n0\n742\n141\n7\n33\n12\n0\n2\n10\n24\n17\n6\n2\n801\n15\n0\n0\n0\n78\n15\n23\n69\n1\n58\n487\n1\n167\n57\n2\n24\n10\n356\n27\n34\n112\n393\n5\n0\n5\n0\n369\n2499\n6\n2\n167\n25\n1269\n6\n12\n30\n3\n5\n260\n1\n6\n0\n2\n3\n50\n385\n3\n15\n400\n385\n87\n45\n150\n29\n472\n15\n66\n11\n29\n31\n13\n0\n0\n0\n2\n13\n6\n1\n0\n2\n10\n50\n8\n116\n15\n3\n7\n8\n2\n23\n34\n1323\n2\n9\n281\n236\n27\n148\n17\n0\n56\n176\n6\n8\n178\n68\n66\n39\n5\n689\n2\n23\n105\n360\n1\n0\n15\n34\n100\n20\n0\n4\n34\n6\n15\n0\n1\n120\n21\n0\n94\n28\n1\n1\n82\n4\n38\n0\n11\n14\n8\n343\n2\n90\n13\n16\n14\n78\n64\n6\n4\n29\n18\n\n\nFitness Accessories\n0\n0\n16\n1\n3\n3\n5\n0\n11\n0\n1\n1\n3\n0\n0\n2\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n1\n0\n3\n0\n1\n11\n0\n3\n2\n0\n1\n0\n6\n0\n2\n0\n6\n1\n0\n0\n0\n3\n49\n0\n0\n4\n2\n19\n0\n1\n1\n0\n0\n6\n0\n0\n0\n0\n0\n2\n8\n1\n1\n9\n6\n1\n1\n3\n2\n2\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n1\n0\n0\n1\n17\n0\n0\n3\n6\n2\n8\n1\n0\n2\n2\n0\n0\n1\n2\n1\n2\n0\n10\n1\n0\n0\n6\n0\n0\n0\n0\n1\n1\n0\n0\n2\n0\n0\n0\n0\n2\n0\n0\n1\n1\n0\n0\n2\n0\n1\n0\n0\n0\n0\n6\n0\n2\n0\n0\n0\n2\n0\n0\n0\n0\n0\n\n\nGarden\n2\n0\n0\n0\n0\n0\n0\n0\n115\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n121\n0\n0\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n45\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n66\n45\n0\n0\n0\n0\n0\n0\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n3\n0\n0\n0\n0\n0\n0\n7\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n\n\nGirls' Apparel\n1\n0\n47\n2\n6\n1\n17\n0\n44\n10\n0\n3\n1\n0\n0\n0\n0\n0\n0\n0\n44\n1\n0\n0\n0\n3\n0\n3\n10\n0\n7\n45\n0\n15\n3\n0\n4\n0\n32\n1\n1\n3\n28\n1\n0\n0\n0\n19\n217\n1\n0\n16\n2\n62\n1\n2\n4\n0\n0\n18\n0\n0\n0\n0\n0\n3\n31\n1\n1\n34\n33\n6\n4\n13\n0\n19\n2\n2\n0\n1\n1\n1\n0\n0\n0\n0\n0\n1\n0\n1\n0\n1\n2\n2\n10\n0\n0\n1\n1\n0\n0\n2\n70\n0\n0\n20\n16\n5\n14\n0\n0\n5\n20\n0\n1\n7\n3\n6\n1\n0\n39\n0\n1\n12\n24\n0\n0\n0\n5\n6\n1\n0\n0\n5\n1\n2\n0\n0\n12\n3\n0\n2\n1\n0\n0\n7\n0\n2\n0\n0\n0\n0\n32\n0\n11\n0\n0\n4\n9\n6\n0\n0\n0\n0\n\n\nGolf Apparel\n0\n0\n24\n1\n2\n2\n3\n0\n16\n3\n1\n1\n1\n0\n0\n1\n0\n0\n0\n0\n22\n1\n1\n0\n0\n1\n0\n0\n2\n0\n2\n8\n1\n3\n2\n0\n1\n0\n10\n1\n0\n4\n6\n0\n0\n0\n0\n10\n54\n0\n0\n5\n3\n48\n0\n0\n1\n0\n0\n11\n0\n0\n0\n0\n0\n1\n10\n0\n0\n8\n6\n1\n0\n3\n2\n15\n1\n1\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n2\n3\n0\n0\n0\n1\n0\n0\n1\n34\n0\n0\n9\n6\n2\n0\n0\n0\n2\n5\n0\n0\n11\n2\n1\n1\n0\n22\n0\n0\n1\n12\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n1\n0\n0\n2\n0\n0\n2\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n1\n1\n1\n1\n0\n1\n1\n0\n0\n2\n0\n\n\nGolf Bags & Carts\n0\n0\n7\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n13\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n3\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n\n\nGolf Balls\n0\n0\n63\n2\n8\n6\n15\n1\n79\n4\n0\n6\n2\n0\n0\n1\n4\n5\n1\n0\n70\n3\n0\n0\n0\n4\n2\n2\n12\n0\n9\n56\n0\n18\n11\n0\n2\n1\n28\n1\n1\n13\n31\n0\n0\n1\n0\n29\n228\n1\n0\n11\n1\n67\n0\n0\n3\n0\n1\n21\n0\n1\n0\n1\n1\n3\n20\n0\n0\n48\n34\n10\n1\n16\n2\n32\n2\n6\n3\n0\n3\n1\n0\n0\n0\n0\n0\n3\n0\n0\n0\n2\n8\n0\n15\n1\n0\n1\n0\n1\n3\n2\n115\n0\n0\n33\n31\n1\n15\n0\n0\n7\n15\n1\n0\n13\n4\n11\n2\n0\n25\n0\n1\n12\n31\n0\n0\n0\n7\n8\n1\n0\n0\n4\n0\n1\n0\n0\n10\n2\n0\n2\n2\n0\n0\n3\n1\n3\n0\n1\n2\n0\n40\n0\n11\n1\n1\n1\n4\n5\n0\n1\n2\n1\n\n\nGolf Gloves\n1\n0\n67\n1\n5\n3\n20\n0\n43\n6\n0\n2\n1\n0\n0\n0\n2\n2\n0\n0\n56\n1\n0\n0\n0\n5\n0\n0\n5\n0\n10\n42\n0\n14\n3\n0\n4\n0\n29\n2\n2\n7\n11\n2\n0\n0\n0\n18\n144\n1\n0\n4\n0\n65\n1\n0\n1\n1\n1\n14\n0\n0\n0\n1\n0\n5\n25\n0\n0\n30\n24\n5\n1\n18\n3\n32\n2\n3\n2\n3\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n1\n5\n0\n0\n0\n0\n0\n2\n1\n83\n0\n0\n16\n18\n2\n8\n1\n0\n2\n11\n0\n0\n9\n6\n2\n0\n0\n53\n0\n1\n5\n19\n0\n0\n0\n4\n6\n0\n0\n0\n2\n1\n1\n0\n0\n7\n0\n0\n7\n2\n0\n0\n2\n1\n0\n0\n2\n1\n0\n19\n0\n7\n0\n0\n1\n4\n1\n2\n0\n1\n0\n\n\nGolf Shoes\n0\n0\n47\n1\n1\n1\n8\n0\n7\n7\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n32\n0\n0\n0\n0\n2\n0\n2\n3\n0\n3\n10\n0\n6\n0\n0\n1\n0\n7\n1\n1\n4\n8\n0\n0\n0\n0\n14\n58\n0\n0\n3\n0\n47\n0\n0\n2\n0\n0\n10\n0\n0\n0\n0\n0\n2\n18\n0\n1\n15\n4\n5\n3\n3\n1\n17\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n3\n1\n0\n0\n0\n0\n0\n0\n52\n0\n1\n10\n2\n2\n2\n0\n0\n0\n10\n0\n0\n7\n4\n1\n3\n0\n24\n0\n0\n4\n12\n0\n0\n0\n0\n1\n3\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n5\n3\n0\n0\n2\n0\n2\n0\n0\n0\n0\n6\n0\n1\n0\n0\n0\n2\n1\n0\n0\n0\n0\n\n\nHealth and Beauty\n2\n0\n0\n0\n0\n0\n0\n0\n76\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n58\n0\n0\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n25\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n64\n47\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n\n\nHockey\n1\n0\n29\n3\n5\n1\n6\n0\n32\n7\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n29\n0\n0\n0\n0\n0\n0\n0\n2\n0\n3\n15\n0\n7\n0\n1\n2\n1\n10\n1\n1\n4\n13\n0\n0\n0\n0\n11\n107\n0\n0\n14\n1\n42\n0\n0\n1\n0\n0\n5\n0\n1\n0\n0\n0\n4\n7\n0\n0\n23\n12\n6\n2\n1\n2\n14\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n2\n0\n5\n0\n0\n0\n0\n0\n0\n3\n43\n0\n0\n12\n7\n0\n5\n0\n0\n1\n7\n0\n0\n5\n2\n2\n1\n0\n16\n0\n0\n7\n13\n0\n0\n0\n0\n7\n2\n0\n0\n2\n0\n1\n0\n0\n2\n0\n0\n1\n1\n0\n0\n6\n0\n2\n0\n1\n1\n0\n17\n0\n4\n1\n0\n0\n1\n2\n0\n0\n0\n0\n\n\nHunting & Shooting\n0\n0\n24\n3\n1\n1\n5\n0\n13\n4\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n23\n0\n0\n0\n0\n0\n3\n1\n2\n0\n2\n12\n0\n8\n0\n0\n0\n0\n5\n0\n2\n3\n8\n1\n0\n0\n0\n15\n49\n0\n0\n3\n4\n39\n0\n0\n1\n0\n0\n5\n0\n0\n0\n0\n0\n2\n14\n0\n1\n8\n6\n4\n1\n4\n2\n12\n1\n1\n1\n2\n1\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n1\n0\n0\n0\n0\n0\n1\n0\n34\n0\n0\n10\n8\n1\n4\n0\n0\n2\n5\n0\n2\n7\n3\n1\n0\n1\n20\n0\n0\n1\n14\n0\n0\n1\n0\n2\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n4\n1\n0\n0\n2\n0\n0\n0\n0\n0\n0\n6\n0\n1\n1\n0\n0\n2\n0\n0\n0\n0\n0\n\n\nIndoor/Outdoor Games\n13\n6\n962\n39\n99\n70\n216\n1\n808\n140\n6\n43\n10\n0\n0\n9\n25\n20\n5\n2\n898\n18\n1\n0\n2\n78\n15\n32\n109\n0\n82\n550\n0\n218\n56\n8\n28\n9\n412\n35\n22\n140\n410\n2\n0\n4\n0\n418\n2745\n4\n4\n228\n26\n1358\n5\n3\n29\n2\n5\n329\n1\n7\n0\n3\n3\n62\n379\n5\n24\n418\n393\n105\n37\n168\n25\n504\n18\n73\n10\n35\n25\n8\n0\n0\n2\n4\n8\n12\n2\n2\n1\n18\n44\n10\n128\n16\n2\n4\n8\n1\n25\n36\n1511\n2\n6\n355\n264\n30\n182\n12\n2\n67\n247\n7\n10\n180\n88\n89\n31\n3\n775\n2\n26\n112\n415\n1\n2\n6\n51\n127\n26\n0\n6\n45\n4\n11\n1\n0\n122\n26\n1\n89\n22\n1\n0\n82\n4\n53\n0\n10\n19\n8\n389\n3\n106\n10\n13\n14\n109\n69\n9\n2\n34\n22\n\n\nKids' Golf Clubs\n0\n0\n56\n0\n0\n0\n1\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n10\n1\n0\n0\n7\n0\n0\n0\n0\n18\n0\n0\n0\n0\n1\n87\n0\n0\n0\n1\n0\n6\n0\n0\n0\n0\n0\n0\n13\n0\n0\n0\n0\n0\n2\n0\n0\n30\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n26\n0\n0\n6\n0\n1\n0\n0\n0\n0\n5\n0\n0\n12\n1\n0\n2\n0\n40\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n\n\nLacrosse\n1\n0\n15\n1\n3\n3\n5\n0\n13\n3\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n13\n1\n0\n0\n0\n0\n0\n0\n1\n0\n3\n12\n0\n4\n0\n0\n1\n0\n5\n0\n1\n2\n6\n0\n0\n0\n0\n6\n45\n0\n1\n3\n2\n16\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n1\n8\n1\n0\n3\n5\n0\n1\n4\n0\n12\n1\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n1\n4\n0\n0\n0\n0\n0\n0\n1\n39\n0\n0\n14\n7\n2\n2\n0\n0\n0\n8\n0\n0\n4\n0\n0\n2\n0\n17\n0\n0\n0\n5\n0\n0\n0\n3\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n1\n0\n0\n0\n1\n0\n1\n6\n0\n5\n0\n1\n0\n1\n1\n0\n0\n0\n0\n\n\nMen's Clothing\n0\n0\n0\n0\n0\n0\n0\n0\n58\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n31\n0\n0\n14\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28\n23\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n6\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n\n\nMen's Footwear\n19\n5\n1155\n41\n114\n55\n236\n0\n942\n185\n6\n62\n11\n2\n1\n12\n34\n29\n3\n3\n1002\n18\n3\n0\n1\n79\n19\n35\n121\n0\n93\n642\n1\n211\n55\n3\n27\n10\n443\n40\n50\n153\n465\n3\n1\n3\n1\n474\n3267\n2\n1\n197\n43\n1544\n1\n13\n28\n5\n6\n351\n1\n6\n0\n4\n2\n82\n455\n9\n26\n508\n424\n124\n62\n194\n30\n632\n20\n87\n16\n42\n27\n19\n0\n2\n6\n2\n14\n22\n2\n4\n0\n20\n44\n14\n169\n7\n3\n16\n8\n1\n35\n45\n1728\n3\n7\n374\n281\n51\n191\n18\n4\n84\n243\n9\n10\n222\n99\n82\n39\n5\n879\n3\n22\n127\n474\n0\n2\n7\n54\n136\n38\n0\n5\n40\n12\n19\n0\n0\n145\n31\n1\n122\n55\n1\n0\n102\n2\n51\n1\n17\n13\n5\n463\n7\n113\n16\n28\n19\n126\n74\n7\n5\n35\n29\n\n\nMen's Golf Clubs\n0\n0\n45\n0\n0\n0\n5\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n23\n0\n0\n0\n0\n3\n0\n0\n0\n0\n2\n0\n0\n6\n0\n0\n0\n0\n5\n0\n0\n0\n10\n0\n0\n0\n0\n13\n0\n0\n0\n0\n0\n39\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n1\n0\n0\n23\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n32\n0\n0\n6\n0\n1\n0\n0\n0\n0\n5\n0\n0\n5\n1\n0\n1\n0\n26\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n\n\nMusic\n2\n0\n0\n0\n0\n0\n0\n0\n124\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n78\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n26\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n87\n56\n0\n0\n0\n0\n0\n0\n19\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n\n\nPet Supplies\n2\n0\n0\n0\n0\n0\n0\n0\n145\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n106\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n38\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n54\n67\n0\n0\n0\n0\n0\n0\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n16\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n\n\nShop By Sport\n11\n2\n564\n22\n65\n25\n124\n0\n426\n78\n4\n29\n10\n1\n0\n6\n10\n12\n2\n1\n515\n4\n1\n0\n0\n35\n4\n18\n62\n0\n48\n315\n2\n114\n33\n1\n23\n3\n215\n15\n18\n70\n257\n1\n0\n1\n1\n235\n1578\n1\n3\n101\n17\n873\n4\n4\n10\n1\n2\n179\n0\n3\n1\n1\n1\n32\n234\n1\n8\n265\n237\n53\n28\n98\n12\n274\n11\n33\n8\n17\n17\n4\n0\n0\n0\n3\n4\n12\n1\n2\n0\n6\n33\n6\n61\n14\n3\n7\n11\n0\n19\n21\n852\n1\n4\n206\n143\n14\n112\n5\n0\n40\n120\n5\n6\n122\n38\n37\n29\n3\n397\n4\n12\n66\n246\n0\n1\n10\n31\n65\n19\n1\n1\n18\n3\n5\n1\n1\n70\n26\n0\n52\n15\n1\n0\n47\n1\n24\n1\n5\n9\n3\n210\n1\n63\n5\n6\n4\n66\n26\n8\n1\n12\n13\n\n\nSoccer\n0\n0\n17\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n6\n0\n1\n0\n4\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n29\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n2\n5\n0\n0\n0\n0\n0\n1\n0\n0\n7\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n3\n0\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n0\n0\n0\n12\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n\n\nSporting Goods\n3\n0\n0\n0\n0\n0\n0\n0\n89\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n72\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n67\n51\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n1\n0\n0\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n0\n0\n\n\nStrength Training\n0\n0\n18\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n1\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n0\n27\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n2\n0\n0\n6\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n1\n0\n0\n0\n0\n0\n0\n2\n0\n0\n5\n1\n0\n0\n0\n18\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nTennis & Racquet\n0\n0\n7\n1\n1\n1\n3\n0\n17\n4\n0\n0\n0\n0\n0\n1\n0\n0\n1\n0\n12\n1\n0\n0\n0\n0\n0\n0\n3\n0\n3\n10\n0\n3\n1\n1\n0\n0\n6\n0\n0\n5\n4\n0\n0\n0\n0\n5\n58\n0\n0\n2\n1\n15\n0\n0\n2\n0\n0\n4\n0\n0\n0\n0\n0\n2\n8\n0\n0\n10\n12\n4\n3\n2\n0\n8\n2\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n9\n5\n0\n3\n0\n0\n1\n1\n0\n0\n2\n4\n1\n0\n1\n12\n0\n0\n3\n6\n0\n0\n0\n1\n4\n1\n0\n0\n1\n0\n0\n0\n0\n2\n1\n0\n1\n0\n0\n0\n1\n0\n1\n0\n1\n0\n1\n12\n0\n1\n0\n0\n0\n4\n2\n0\n0\n0\n0\n\n\nToys\n1\n0\n0\n0\n0\n0\n0\n0\n130\n0\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n0\n0\n85\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n26\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n65\n108\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9\n0\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n21\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7\n0\n0\n0\n0\n\n\nTrade-In\n0\n0\n35\n0\n6\n5\n6\n0\n47\n3\n0\n3\n1\n1\n0\n0\n1\n1\n0\n0\n58\n0\n0\n0\n0\n2\n1\n1\n8\n0\n2\n33\n0\n17\n1\n1\n2\n0\n16\n1\n4\n10\n17\n0\n0\n0\n0\n13\n148\n0\n1\n8\n1\n52\n0\n1\n3\n0\n0\n17\n0\n0\n0\n0\n0\n3\n17\n1\n2\n28\n25\n6\n3\n7\n2\n20\n1\n8\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n3\n1\n4\n0\n1\n0\n0\n0\n1\n1\n70\n0\n0\n14\n17\n0\n14\n0\n0\n3\n11\n1\n0\n8\n5\n1\n1\n0\n39\n0\n3\n6\n25\n0\n0\n0\n3\n3\n3\n0\n0\n3\n1\n0\n0\n0\n11\n0\n0\n5\n1\n0\n0\n4\n0\n2\n0\n2\n2\n0\n31\n0\n5\n2\n2\n0\n8\n3\n0\n0\n0\n1\n\n\nVideo Games\n10\n0\n0\n0\n0\n0\n0\n0\n188\n0\n0\n7\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n7\n0\n0\n0\n0\n151\n0\n0\n25\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n55\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n144\n87\n0\n0\n0\n0\n0\n0\n29\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n32\n0\n0\n0\n0\n0\n0\n0\n0\n6\n0\n0\n1\n0\n0\n0\n0\n0\n0\n28\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n23\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n0\n0\n0\n0\n\n\nWater Sports\n15\n3\n826\n27\n77\n48\n181\n0\n637\n124\n5\n39\n10\n0\n2\n8\n21\n23\n3\n0\n711\n13\n0\n0\n0\n49\n8\n29\n92\n0\n79\n409\n1\n171\n47\n4\n23\n6\n303\n24\n27\n106\n310\n2\n0\n4\n1\n325\n2228\n1\n0\n146\n19\n1145\n3\n9\n34\n0\n0\n279\n1\n4\n1\n3\n3\n48\n324\n5\n8\n341\n289\n92\n35\n130\n28\n461\n12\n63\n9\n16\n29\n9\n1\n0\n4\n4\n12\n12\n1\n2\n0\n15\n43\n7\n115\n10\n1\n6\n6\n2\n23\n33\n1207\n4\n7\n277\n214\n19\n125\n6\n0\n49\n168\n2\n12\n176\n73\n47\n26\n3\n641\n3\n13\n81\n353\n0\n3\n7\n38\n83\n16\n0\n5\n27\n4\n10\n3\n1\n86\n23\n1\n58\n38\n1\n0\n70\n4\n32\n0\n11\n8\n5\n295\n3\n89\n10\n15\n11\n91\n66\n6\n3\n25\n21\n\n\nWomen's Apparel\n15\n6\n1101\n42\n103\n53\n263\n0\n815\n169\n6\n35\n17\n0\n2\n11\n26\n36\n5\n1\n1018\n18\n3\n0\n0\n82\n19\n33\n112\n1\n89\n548\n2\n207\n53\n4\n31\n19\n417\n32\n37\n135\n473\n3\n0\n2\n1\n448\n3103\n3\n4\n223\n40\n1544\n8\n13\n34\n4\n6\n342\n1\n4\n0\n4\n2\n65\n454\n4\n24\n473\n400\n124\n58\n146\n22\n566\n13\n71\n16\n28\n26\n16\n0\n1\n1\n5\n18\n17\n0\n5\n3\n23\n49\n16\n118\n15\n2\n9\n7\n0\n25\n36\n1551\n2\n13\n353\n307\n32\n196\n12\n0\n71\n225\n8\n4\n213\n89\n80\n48\n7\n853\n1\n22\n129\n437\n1\n0\n10\n53\n133\n29\n0\n4\n42\n10\n20\n3\n1\n136\n38\n1\n126\n56\n1\n0\n93\n3\n31\n3\n21\n16\n4\n421\n9\n117\n7\n15\n14\n128\n82\n8\n4\n38\n20\n\n\nWomen's Clothing\n0\n0\n0\n0\n0\n0\n0\n0\n177\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n87\n0\n0\n9\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n49\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3\n0\n105\n105\n0\n0\n0\n0\n0\n0\n11\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14\n0\n0\n0\n0\n0\n0\n0\n0\n12\n0\n0\n2\n0\n0\n0\n0\n0\n0\n25\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n15\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n22\n0\n0\n0\n0\n\n\nWomen's Golf Clubs\n0\n0\n29\n0\n0\n0\n4\n0\n0\n3\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n14\n0\n0\n0\n0\n1\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n8\n1\n0\n0\n5\n0\n0\n0\n0\n7\n0\n0\n0\n0\n0\n34\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n0\n1\n0\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20\n0\n0\n5\n0\n2\n0\n0\n0\n0\n4\n0\n0\n2\n0\n0\n0\n0\n10\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\ncross_tab(supply_df, \"Type\", ['Late_delivery_risk', 'Delivery Status', 'Customer Segment', 'Department Name'])\n\n\n\n\n\n\n\n\n\nLate_delivery_risk\nDelivery Status\nCustomer Segment\nDepartment Name\n\n\n\n0\n1\nTotal\nAdvance shipping\nLate delivery\nShipping canceled\nShipping on time\nTotal\nConsumer\nCorporate\nHome Office\nTotal\nApparel\nBook Shop\nDiscs Shop\nFan Shop\nFitness\nFootwear\nGolf\nHealth and Beauty\nOutdoors\nPet Shop\nTechnology\nTotal\n\n\nType\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCASH\n8507\n11109\n19616\n4809\n11109\n0\n3698\n19616\n9972\n6161\n3483\n19616\n5318\n48\n235\n7304\n272\n1601\n3551\n38\n1026\n60\n163\n19616\n\n\nDEBIT\n29645\n39648\n69293\n16549\n39648\n0\n13096\n69293\n36011\n20919\n12363\n69293\n18863\n142\n771\n25502\n939\n5549\n12879\n149\n3733\n199\n567\n69293\n\n\nPAYMENT\n17720\n24004\n41724\n10008\n24004\n0\n7712\n41724\n21766\n12526\n7432\n41724\n11218\n106\n467\n15582\n581\n3338\n7716\n72\n2199\n109\n336\n41724\n\n\nTRANSFER\n25668\n24215\n49883\n10226\n24215\n7754\n7688\n49883\n25753\n15182\n8948\n49883\n13598\n109\n552\n18473\n687\n4037\n9074\n103\n2728\n124\n398\n49883\n\n\nTotal\n81540\n98976\n180516\n41592\n98976\n7754\n32194\n180516\n93502\n54788\n32226\n180516\n48997\n405\n2025\n66861\n2479\n14525\n33220\n362\n9686\n492\n1464\n180516\n\n\n\n\n\n\n\n\n\ncross_tab(supply_df, \"Delivery Status\", ['Late_delivery_risk', 'Shipping Mode', 'Department Name'])\n\n\n\n\n\n\n\n\n\nLate_delivery_risk\nShipping Mode\nDepartment Name\n\n\n\n0\n1\nTotal\nFirst Class\nSame Day\nSecond Class\nStandard Class\nTotal\nApparel\nBook Shop\nDiscs Shop\nFan Shop\nFitness\nFootwear\nGolf\nHealth and Beauty\nOutdoors\nPet Shop\nTechnology\nTotal\n\n\nDelivery Status\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdvance shipping\n41592\n0\n41592\n0\n0\n0\n41592\n41592\n11180\n87\n469\n15403\n572\n3368\n7706\n83\n2289\n91\n344\n41592\n\n\nLate delivery\n0\n98976\n98976\n26512\n4454\n26987\n41023\n98976\n26825\n229\n1103\n36623\n1377\n7949\n18198\n202\n5375\n290\n805\n98976\n\n\nShipping canceled\n7754\n0\n7754\n1301\n444\n1410\n4599\n7754\n2114\n14\n83\n2828\n105\n634\n1452\n16\n419\n20\n69\n7754\n\n\nShipping on time\n32194\n0\n32194\n0\n4839\n6819\n20536\n32194\n8878\n75\n370\n12007\n425\n2574\n5864\n61\n1603\n91\n246\n32194\n\n\nTotal\n81540\n98976\n180516\n27813\n9737\n35216\n107750\n180516\n48997\n405\n2025\n66861\n2479\n14525\n33220\n362\n9686\n492\n1464\n180516\n\n\n\n\n\n\n\n\n\ncross_tab(supply_df, 'Department Name', ['Late_delivery_risk', 'Delivery Status', 'Customer Segment', 'Shipping Mode'])\n\n\n\n\n\n\n\n\n\nLate_delivery_risk\nDelivery Status\nCustomer Segment\nShipping Mode\n\n\n\n0\n1\nTotal\nAdvance shipping\nLate delivery\nShipping canceled\nShipping on time\nTotal\nConsumer\nCorporate\nHome Office\nTotal\nFirst Class\nSame Day\nSecond Class\nStandard Class\nTotal\n\n\nDepartment Name\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nApparel\n22172\n26825\n48997\n11180\n26825\n2114\n8878\n48997\n25326\n14847\n8824\n48997\n7433\n2655\n9685\n29224\n48997\n\n\nBook Shop\n176\n229\n405\n87\n229\n14\n75\n405\n179\n129\n97\n405\n53\n44\n64\n244\n405\n\n\nDiscs Shop\n922\n1103\n2025\n469\n1103\n83\n370\n2025\n1049\n570\n406\n2025\n276\n103\n380\n1266\n2025\n\n\nFan Shop\n30238\n36623\n66861\n15403\n36623\n2828\n12007\n66861\n34635\n20373\n11853\n66861\n10249\n3615\n13013\n39984\n66861\n\n\nFitness\n1102\n1377\n2479\n572\n1377\n105\n425\n2479\n1282\n775\n422\n2479\n397\n132\n478\n1472\n2479\n\n\nFootwear\n6576\n7949\n14525\n3368\n7949\n634\n2574\n14525\n7582\n4373\n2570\n14525\n2252\n783\n2814\n8676\n14525\n\n\nGolf\n15022\n18198\n33220\n7706\n18198\n1452\n5864\n33220\n17234\n10069\n5917\n33220\n5276\n1777\n6424\n19743\n33220\n\n\nHealth and Beauty\n160\n202\n362\n83\n202\n16\n61\n362\n190\n117\n55\n362\n67\n14\n66\n215\n362\n\n\nOutdoors\n4311\n5375\n9686\n2289\n5375\n419\n1603\n9686\n5003\n2944\n1739\n9686\n1458\n503\n1886\n5839\n9686\n\n\nPet Shop\n202\n290\n492\n91\n290\n20\n91\n492\n241\n161\n90\n492\n84\n40\n119\n249\n492\n\n\nTechnology\n659\n805\n1464\n344\n805\n69\n246\n1464\n781\n430\n253\n1464\n268\n71\n287\n838\n1464\n\n\nTotal\n81540\n98976\n180516\n41592\n98976\n7754\n32194\n180516\n93502\n54788\n32226\n180516\n27813\n9737\n35216\n107750\n180516\n\n\n\n\n\n\n\n\n\nnumerical_cols = supply_df.select_dtypes(include = 'number').columns.tolist()\nprint(numerical_cols)\ncategorical_cols = supply_df.select_dtypes(include = 'object').columns.tolist()\nprint(categorical_cols)\n\n['Days for shipping (real)', 'Days for shipment (scheduled)', 'Benefit per order', 'Sales per customer', 'Late_delivery_risk', 'Category Id', 'Customer Id', 'Customer Zipcode', 'Department Id', 'Latitude', 'Longitude', 'Order Customer Id', 'Order Id', 'Order Item Cardprod Id', 'Order Item Discount', 'Order Item Discount Rate', 'Order Item Id', 'Order Item Product Price', 'Order Item Profit Ratio', 'Order Item Quantity', 'Sales', 'Order Item Total', 'Order Profit Per Order', 'Product Card Id', 'Product Category Id', 'Product Price', 'Product Status']\n['Type', 'Delivery Status', 'Category Name', 'Customer City', 'Customer Country', 'Customer Segment', 'Customer State', 'Department Name', 'Market', 'Order City', 'Order Country', 'Order Region', 'Order State', 'Order Status', 'Product Name', 'Shipping Mode']\n\n\n\ntokenized_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 469977 entries, 0 to 469976\nData columns (total 8 columns):\n #   Column      Non-Null Count   Dtype \n---  ------      --------------   ----- \n 0   Product     469977 non-null  object\n 1   Category    469977 non-null  object\n 2   Date        469977 non-null  object\n 3   Month       469977 non-null  object\n 4   Hour        469977 non-null  int64 \n 5   Department  469977 non-null  object\n 6   ip          469977 non-null  object\n 7   url         469977 non-null  object\ndtypes: int64(1), object(7)\nmemory usage: 28.7+ MB\n\n\n\nsupply_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nInt64Index: 180516 entries, 0 to 180518\nData columns (total 45 columns):\n #   Column                         Non-Null Count   Dtype         \n---  ------                         --------------   -----         \n 0   Type                           180516 non-null  object        \n 1   Days for shipping (real)       180516 non-null  int64         \n 2   Days for shipment (scheduled)  180516 non-null  int64         \n 3   Benefit per order              180516 non-null  float64       \n 4   Sales per customer             180516 non-null  float64       \n 5   Delivery Status                180516 non-null  object        \n 6   Late_delivery_risk             180516 non-null  int64         \n 7   Category Id                    180516 non-null  int64         \n 8   Category Name                  180516 non-null  object        \n 9   Customer City                  180516 non-null  object        \n 10  Customer Country               180516 non-null  object        \n 11  Customer Id                    180516 non-null  int64         \n 12  Customer Segment               180516 non-null  object        \n 13  Customer State                 180516 non-null  object        \n 14  Customer Zipcode               180516 non-null  float64       \n 15  Department Id                  180516 non-null  int64         \n 16  Department Name                180516 non-null  object        \n 17  Latitude                       180516 non-null  float64       \n 18  Longitude                      180516 non-null  float64       \n 19  Market                         180516 non-null  object        \n 20  Order City                     180516 non-null  object        \n 21  Order Country                  180516 non-null  object        \n 22  Order Customer Id              180516 non-null  int64         \n 23  order date (DateOrders)        180516 non-null  datetime64[ns]\n 24  Order Id                       180516 non-null  int64         \n 25  Order Item Cardprod Id         180516 non-null  int64         \n 26  Order Item Discount            180516 non-null  float64       \n 27  Order Item Discount Rate       180516 non-null  float64       \n 28  Order Item Id                  180516 non-null  int64         \n 29  Order Item Product Price       180516 non-null  float64       \n 30  Order Item Profit Ratio        180516 non-null  float64       \n 31  Order Item Quantity            180516 non-null  int64         \n 32  Sales                          180516 non-null  float64       \n 33  Order Item Total               180516 non-null  float64       \n 34  Order Profit Per Order         180516 non-null  float64       \n 35  Order Region                   180516 non-null  object        \n 36  Order State                    180516 non-null  object        \n 37  Order Status                   180516 non-null  object        \n 38  Product Card Id                180516 non-null  int64         \n 39  Product Category Id            180516 non-null  int64         \n 40  Product Name                   180516 non-null  object        \n 41  Product Price                  180516 non-null  float64       \n 42  Product Status                 180516 non-null  int64         \n 43  shipping date (DateOrders)     180516 non-null  datetime64[ns]\n 44  Shipping Mode                  180516 non-null  object        \ndtypes: datetime64[ns](2), float64(13), int64(14), object(16)\nmemory usage: 63.4+ MB\n\n\n\ndesc_df.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 52 entries, 0 to 51\nData columns (total 2 columns):\n #   Column       Non-Null Count  Dtype \n---  ------       --------------  ----- \n 0   FIELDS       52 non-null     object\n 1   DESCRIPTION  52 non-null     object\ndtypes: object(2)\nmemory usage: 960.0+ bytes\n\n\nVisualization\n\nfig, axes = plt.subplots(nrows = 1, ncols = 2, figsize = (15, 6))\npearson_corr = supply_df[numerical_cols].corr()\nspearman_corr = supply_df[numerical_cols].corr(method = 'spearman')\nsb.heatmap(pearson_corr, annot = True, ax = axes[0])\nsb.heatmap(spearman_corr, annot = True, ax = axes[1])\naxes[0].set_title('Pearson Correlation')\naxes[1].set_title('Spearman Correlation')\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nsupply_df.drop(columns = ['Order Profit Per Order', 'Sales per customer', 'Order Item Total', 'Department Id', 'Order Item Cardprod Id', 'Product Category Id', 'Product Card Id', 'Order Customer Id', 'Order Item Product Price', 'Product Status'],  inplace = True)\n\n\nsupply_df.head()\n\n\n\n\n\n\n\n\n\nType\nDays for shipping (real)\nDays for shipment (scheduled)\nBenefit per order\nDelivery Status\nLate_delivery_risk\nCategory Id\nCategory Name\nCustomer City\nCustomer Country\nCustomer Id\nCustomer Segment\nCustomer State\nCustomer Zipcode\nDepartment Name\nLatitude\nLongitude\nMarket\nOrder City\nOrder Country\norder date (DateOrders)\nOrder Id\nOrder Item Discount\nOrder Item Discount Rate\nOrder Item Id\nOrder Item Profit Ratio\nOrder Item Quantity\nSales\nOrder Region\nOrder State\nOrder Status\nProduct Name\nProduct Price\nshipping date (DateOrders)\nShipping Mode\n\n\n\n\n0\nDEBIT\n3\n4\n91.250000\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\n20755\nConsumer\nPR\n725.0\nFitness\n18.251453\n-66.037056\nPacific Asia\nBekasi\nIndonesia\n2018-01-31 22:56:00\n77202\n13.110000\n0.04\n180517\n0.29\n1\n327.75\nSoutheast Asia\nJava Occidental\nCOMPLETE\nSmart watch\n327.75\n2018-02-03 22:56:00\nStandard Class\n\n\n1\nTRANSFER\n5\n4\n-249.089996\nLate delivery\n1\n73\nSporting Goods\nCaguas\nPuerto Rico\n19492\nConsumer\nPR\n725.0\nFitness\n18.279451\n-66.037064\nPacific Asia\nBikaner\nIndia\n2018-01-13 12:27:00\n75939\n16.389999\n0.05\n179254\n-0.80\n1\n327.75\nSouth Asia\nRajastán\nPENDING\nSmart watch\n327.75\n2018-01-18 12:27:00\nStandard Class\n\n\n2\nCASH\n4\n4\n-247.779999\nShipping on time\n0\n73\nSporting Goods\nSan Jose\nEE. UU.\n19491\nConsumer\nCA\n95125.0\nFitness\n37.292233\n-121.881279\nPacific Asia\nBikaner\nIndia\n2018-01-13 12:06:00\n75938\n18.030001\n0.06\n179253\n-0.80\n1\n327.75\nSouth Asia\nRajastán\nCLOSED\nSmart watch\n327.75\n2018-01-17 12:06:00\nStandard Class\n\n\n3\nDEBIT\n3\n4\n22.860001\nAdvance shipping\n0\n73\nSporting Goods\nLos Angeles\nEE. UU.\n19490\nHome Office\nCA\n90027.0\nFitness\n34.125946\n-118.291016\nPacific Asia\nTownsville\nAustralia\n2018-01-13 11:45:00\n75937\n22.940001\n0.07\n179252\n0.08\n1\n327.75\nOceania\nQueensland\nCOMPLETE\nSmart watch\n327.75\n2018-01-16 11:45:00\nStandard Class\n\n\n4\nPAYMENT\n2\n4\n134.210007\nAdvance shipping\n0\n73\nSporting Goods\nCaguas\nPuerto Rico\n19489\nCorporate\nPR\n725.0\nFitness\n18.253769\n-66.037048\nPacific Asia\nTownsville\nAustralia\n2018-01-13 11:24:00\n75936\n29.500000\n0.09\n179251\n0.45\n1\n327.75\nOceania\nQueensland\nPENDING_PAYMENT\nSmart watch\n327.75\n2018-01-15 11:24:00\nStandard Class\n\n\n\n\n\n\n\n\n\nnumerical_cols = supply_df.select_dtypes(include = 'number').columns.tolist()\nprint(numerical_cols)\ncategorical_cols = supply_df.select_dtypes(include = 'object').columns.tolist()\nprint(categorical_cols)\n\n['Days for shipping (real)', 'Days for shipment (scheduled)', 'Benefit per order', 'Late_delivery_risk', 'Category Id', 'Customer Id', 'Customer Zipcode', 'Latitude', 'Longitude', 'Order Id', 'Order Item Discount', 'Order Item Discount Rate', 'Order Item Id', 'Order Item Profit Ratio', 'Order Item Quantity', 'Sales', 'Product Price']\n['Type', 'Delivery Status', 'Category Name', 'Customer City', 'Customer Country', 'Customer Segment', 'Customer State', 'Department Name', 'Market', 'Order City', 'Order Country', 'Order Region', 'Order State', 'Order Status', 'Product Name', 'Shipping Mode']\n\n\n\nplt.hist(supply_df['Benefit per order'], bins=30, color='skyblue', edgecolor='black')\nplt.title('Distribution of Benefit per order')\nplt.xlabel('Benefit per order')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n\n\n\nsb.countplot(data=supply_df, x='Type')\nplt.title('Frequency of Payment Types')\nplt.show()\n\n\n\n\n\n\n\n\n\nsb.scatterplot(data=supply_df, x='Product Price', y='Benefit per order')\nplt.title('Product Price vs Benefit per order')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Bar Plot for Order Status\nplt.figure(figsize=(10, 6))\nsb.countplot(data=supply_df, y='Order Status')\nplt.title('Order Status Count')\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize=(10, 6))\nsb.countplot(data=supply_df, y='Delivery Status')\nplt.title('Delivery Status Count')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Histogram for Product Price\nplt.figure(figsize=(10, 6))\nsb.histplot(supply_df['Product Price'], bins=30, kde=True)\nplt.title('Distribution of Product Price')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Scatter Plot for Product Price vs. Sales\nplt.figure(figsize=(10, 6))\nsb.scatterplot(data=supply_df, x='Product Price', y='Sales')\nplt.title('Product Price vs. Sales')\nplt.show()\n\n\n\n\n\n\n\n\n\ndf = pd.DataFrame()\ndf['Shipment Disparity'] = supply_df['Days for shipping (real)'] - supply_df['Days for shipment (scheduled)']\nsb.histplot(data = df, x = 'Shipment Disparity', kde = True, hue = df['Shipment Disparity'] &gt;= 0, palette = {True: 'blue', False: 'red'})\nplt.title('Disparity by Days')\nplt.legend(title='Shipment Status', labels=['OnTime/Advance', 'Late Delivery'])\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 8))\nsb.histplot(data = supply_df, x = 'Benefit per order', kde = True, hue = supply_df['Benefit per order'] &gt; 0, palette = {True: 'blue', False: 'red'})\nplt.axvline(0, color='green', linestyle='--', linewidth=2)\nplt.legend(['Profit', 'Loss'])\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Order Item Profit Ratio', kde = True, hue = supply_df['Order Item Profit Ratio'] &gt; 0, palette = {True: 'blue', False: 'red'})\nplt.axvline(0, color='green', linestyle='--', linewidth=2)\nplt.legend(['Profit', 'Loss'])\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Category Id', kde = True)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Order Item Discount', kde = True)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Order Item Discount Rate', kde = True)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Order Item Discount Rate', kde = True)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Sales', kde = True)\nplt.show()\n\n\n\n\n\n\n\n\n\nplt.figure(figsize = (15, 6))\nsb.histplot(data = supply_df, x = 'Product Price', kde = True)\nplt.show()\n\n\n\n\n\n\n\n\n\n#tokenized _df visuals \n# Visualization 1: Count of Products by Category\nplt.figure(figsize=(10, 6))\nsb.countplot(data=tokenized_df, x='Category')\nplt.title('Count of Products by Category')\nplt.xticks(rotation=45)\nplt.xlabel('Category')\nplt.ylabel('Count')\nplt.show()\n\n# Visualization 2: Count of Products by Month\nplt.figure(figsize=(10, 6))\nsb.countplot(data=tokenized_df, x='Month', order=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])\nplt.title('Count of Products by Month')\nplt.xlabel('Month')\nplt.ylabel('Count')\nplt.show()\n\n# Visualization 3: Count of Products by Hour\nplt.figure(figsize=(10, 6))\nsb.countplot(data=tokenized_df, x='Hour')\nplt.title('Count of Products by Hour')\nplt.xlabel('Hour')\nplt.ylabel('Count')\nplt.show()\n\n# Visualization 4: Department-wise Distribution of Products\nplt.figure(figsize=(10, 6))\nsb.countplot(data=tokenized_df, x='Department')\nplt.title('Department-wise Distribution of Products')\nplt.xlabel('Department')\nplt.ylabel('Count')\nplt.xticks(rotation=45)\nplt.show()\n\n# Visualization 5: Top N Most Visited URLs\ntop_n = 10\ntop_urls = tokenized_df['url'].value_counts().nlargest(top_n)\nplt.figure(figsize=(10, 6))\nsb.barplot(x=top_urls.values, y=top_urls.index, orient='h')\nplt.title(f'Top {top_n} Most Visited URLs')\nplt.xlabel('Count')\nplt.ylabel('URL')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#tokenized_df analysis\n\n# Analysis 1: Product Category Analysis\nproduct_category_counts = tokenized_df['Category'].value_counts()\nprint(\"Product Category Counts:\")\nprint(product_category_counts)\n\nProduct Category Counts:\ncleats                  27878\nshop by sport           26227\nfeatured shops          26200\nwomen's apparel         25627\nmen's footwear          25241\ngirls' apparel          24581\nelectronics             20845\nindoor outdoor games    16194\nwater sports            16186\nhunting & shooting      15645\ncamping & hiking        15521\nfishing                 15178\nfitness accessories     13752\nhockey                  13657\ncardio equipment        13641\nas seen on  tv!         13448\ntennis & racquet        13275\nlacrosse                12676\nstrength training       12479\nbasketball              12313\nsoccer                  12271\nboxing & mma            12260\nbaseball & softball     12245\nwomen's golf clubs       7782\ngolf shoes               7732\ngolf gloves              7510\ngolf bags & carts        7438\ngolf apparel             7427\naccessories              7279\nkids' golf clubs         7234\ntrade-in                 7208\ngolf balls               7063\nmen's golf clubs         5964\nName: Category, dtype: int64\n\n\n\nplt.figure(figsize=(10, 6))\nsb.barplot(x=product_category_counts.index, y=product_category_counts.values)\nplt.title('Product Category Distribution')\nplt.xlabel('Product Category')\nplt.ylabel('Count')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Analysis 2: Department Analysis\ndepartment_counts = tokenized_df['Department'].value_counts()\nprint(\"Department Counts:\")\nprint(department_counts)\n\nDepartment Counts:\noutdoors     79926\napparel      79319\nfootwear     79136\nfan shop     78724\nfitness      76437\ngolf         76435\nName: Department, dtype: int64\n\n\n\nplt.figure(figsize=(10, 6))\nsb.barplot(x=department_counts.index, y=department_counts.values)\nplt.title('Department Distribution')\nplt.xlabel('Department')\nplt.ylabel('Count')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Analysis 3: Hourly Distribution of Transactions\nplt.figure(figsize=(10, 6))\nsb.histplot(data=tokenized_df, x='Hour', bins=24, kde=False)\nplt.title('Hourly Distribution of Transactions')\nplt.xlabel('Hour of the Day')\nplt.ylabel('Number of Transactions')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Analysis 4: Month by Year Transaction Trend\ntoken_df = tokenized_df\ntoken_df['Year'] = token_df['Date'].dt.year\n\nmonthly_transactions = token_df.groupby(['Year', 'Month']).size()\n\nprint(monthly_transactions)\n\nYear  Month\n2017  Dec       84093\n      Nov       80860\n      Oct       84205\n      Sep      137238\n2018  Jan       83581\ndtype: int64\n\n\n\nmonthly_transactions.plot(kind='line')\nplt.title('Monthly Transaction Trend')\nplt.xlabel('Time (Month, Year)')\nplt.ylabel('Number of Transactions')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Analysis 5: IP Address Analysis\ntop_ip_addresses = tokenized_df['ip'].value_counts().head(10)\nprint(\"Top 10 IP Addresses:\")\nprint(top_ip_addresses)\n\nTop 10 IP Addresses:\n157.21.93.193      566\n138.21.216.113     557\n77.137.114.147     516\n83.234.215.133     514\n47.102.94.70       514\n150.89.112.119     508\n211.122.14.29      505\n99.237.181.177     502\n102.172.170.187    495\n69.214.176.127     493\nName: ip, dtype: int64\n\n\n\n# Analysis 6: URL Analysis\ntop_urls = tokenized_df['url'].value_counts().head(10)\nprint(\"Top 10 URLs:\")\nprint(top_urls)\n\nTop 10 URLs:\n/department/apparel/category/cleats/product/Perfect%20Fitness%20Perfect%20Rip%20Deck                                    20258\n/department/apparel/category/featured%20shops/product/adidas%20Kids'%20RG%20III%20Mid%20Football%20Cleat                18643\n/department/golf/category/women's%20apparel/product/Nike%20Men's%20Dri-FIT%20Victory%20Golf%20Polo                      18372\n/department/apparel/category/men's%20footwear/product/Nike%20Men's%20CJ%20Elite%202%20TD%20Football%20Cleat             17963\n/department/fan%20shop/category/indoor/outdoor%20games/product/O'Brien%20Men's%20Neoprene%20Life%20Vest                 11602\n/department/fan%20shop/category/water%20sports/product/Pelican%20Sunstream%20100%20Kayak                                11577\n/department/fan%20shop/category/camping%20&%20hiking/product/Diamondback%20Women's%20Serene%20Classic%20Comfort%20Bi    11272\n/department/fan%20shop/category/fishing/product/Field%20&%20Stream%20Sportsman%2016%20Gun%20Fire%20Safe                 10704\n/department/footwear/category/cardio%20equipment/product/Nike%20Men's%20Free%205.0+%20Running%20Shoe                     9958\n/department/golf/category/shop%20by%20sport/product/Columbia%20Men's%20PFG%20Anchor%20Tough%20T-Shirt                    9926\nName: url, dtype: int64\n\n\n\n#supply df visuals and analysis\n\n# Visualization 1: Order Status Distribution\nplt.figure(figsize=(10, 6))\nsb.countplot(data=supply_df, x='Order Status')\nplt.title('Order Status Distribution')\nplt.xlabel('Order Status')\nplt.ylabel('Count')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Visualization 2: Sales Trend Over Time\nplt.figure(figsize=(10, 6))\nsb.lineplot(data=supply_df, x='order date (DateOrders)', y='Sales')\nplt.title('Sales Trend Over Time')\nplt.xlabel('Order Date')\nplt.ylabel('Sales')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Visualization 3: Profit Ratio Distribution\nplt.figure(figsize=(10, 6))\nsb.histplot(data=supply_df, x='Order Item Profit Ratio', bins=30, kde=True)\nplt.title('Profit Ratio Distribution')\nplt.xlabel('Profit Ratio')\nplt.ylabel('Frequency')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Visualization 4: Market-wise Sales Analysis\nplt.figure(figsize=(10, 6))\nsb.barplot(data=supply_df, x='Market', y='Sales', estimator=sum)\nplt.title('Market-wise Sales Analysis')\nplt.xlabel('Market')\nplt.ylabel('Total Sales')\nplt.xticks(rotation=45)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Visualization 5: Customer Segment Analysis\nplt.figure(figsize=(8, 8))\nsupply_df['Customer Segment'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.title('Customer Segment Analysis')\nplt.ylabel('')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Visualization 6: Late Delivery Risk Analysis\nplt.figure(figsize=(10, 6))\nsb.countplot(data=supply_df, x='Late_delivery_risk')\nplt.title('Late Delivery Risk Analysis')\nplt.xlabel('Late Delivery Risk')\nplt.ylabel('Count')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Visualization 7: Product Price Distribution\n\"\"\"plt.figure(figsize=(10, 6))\nsb.histplot(data=supply_df, x='Product Price', bins=30, kde=True)\nplt.title('Product Price Distribution')\nplt.xlabel('Product Price')\nplt.ylabel('Frequency')\nplt.show()\"\"\"\n\n\n\n\n\n\n\n\n\n# Visualization 8: Shipping Mode Analysis\nplt.figure(figsize=(8, 8))\nsupply_df['Shipping Mode'].value_counts().plot.pie(autopct='%1.1f%%')\nplt.title('Shipping Mode Analysis')\nplt.ylabel('')\nplt.show()"
  }
]